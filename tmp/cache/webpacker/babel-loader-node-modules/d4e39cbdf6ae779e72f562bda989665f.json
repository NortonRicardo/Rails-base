{"ast":null,"code":"function _typeof2(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\n/*@preserve\r\n * Tempus Dominus Bootstrap4 v5.1.2 (https://tempusdominus.github.io/bootstrap-4/)\r\n * Copyright 2016-2018 Jonathan Peterson\r\n * Licensed under MIT (https://github.com/tempusdominus/bootstrap-3/blob/master/LICENSE)\r\n */\nif (typeof jQuery === 'undefined') {\n  throw new Error('Tempus Dominus Bootstrap4\\'s requires jQuery. jQuery must be included before Tempus Dominus Bootstrap4\\'s JavaScript.');\n}\n\n+function ($) {\n  var version = $.fn.jquery.split(' ')[0].split('.');\n\n  if (version[0] < 2 && version[1] < 9 || version[0] === 1 && version[1] === 9 && version[2] < 1 || version[0] >= 4) {\n    throw new Error('Tempus Dominus Bootstrap4\\'s requires at least jQuery v3.0.0 but less than v4.0.0');\n  }\n}(jQuery);\n\nif (typeof moment === 'undefined') {\n  throw new Error('Tempus Dominus Bootstrap4\\'s requires moment.js. Moment.js must be included before Tempus Dominus Bootstrap4\\'s JavaScript.');\n}\n\nvar version = moment.version.split('.');\n\nif (version[0] <= 2 && version[1] < 17 || version[0] >= 3) {\n  throw new Error('Tempus Dominus Bootstrap4\\'s requires at least moment.js v2.17.0 but less than v3.0.0');\n}\n\n+function () {\n  var _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n    return _typeof2(obj);\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n  };\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (_typeof2(call) === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof2(superClass));\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  } // ReSharper disable once InconsistentNaming\n\n\n  var DateTimePicker = function ($, moment) {\n    // ReSharper disable InconsistentNaming\n    var NAME = 'datetimepicker',\n        DATA_KEY = '' + NAME,\n        EVENT_KEY = '.' + DATA_KEY,\n        DATA_API_KEY = '.data-api',\n        Selector = {\n      DATA_TOGGLE: '[data-toggle=\"' + DATA_KEY + '\"]'\n    },\n        ClassName = {\n      INPUT: NAME + '-input'\n    },\n        Event = {\n      CHANGE: 'change' + EVENT_KEY,\n      BLUR: 'blur' + EVENT_KEY,\n      KEYUP: 'keyup' + EVENT_KEY,\n      KEYDOWN: 'keydown' + EVENT_KEY,\n      FOCUS: 'focus' + EVENT_KEY,\n      CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY,\n      //emitted\n      UPDATE: 'update' + EVENT_KEY,\n      ERROR: 'error' + EVENT_KEY,\n      HIDE: 'hide' + EVENT_KEY,\n      SHOW: 'show' + EVENT_KEY\n    },\n        DatePickerModes = [{\n      CLASS_NAME: 'days',\n      NAV_FUNCTION: 'M',\n      NAV_STEP: 1\n    }, {\n      CLASS_NAME: 'months',\n      NAV_FUNCTION: 'y',\n      NAV_STEP: 1\n    }, {\n      CLASS_NAME: 'years',\n      NAV_FUNCTION: 'y',\n      NAV_STEP: 10\n    }, {\n      CLASS_NAME: 'decades',\n      NAV_FUNCTION: 'y',\n      NAV_STEP: 100\n    }],\n        KeyMap = {\n      'up': 38,\n      38: 'up',\n      'down': 40,\n      40: 'down',\n      'left': 37,\n      37: 'left',\n      'right': 39,\n      39: 'right',\n      'tab': 9,\n      9: 'tab',\n      'escape': 27,\n      27: 'escape',\n      'enter': 13,\n      13: 'enter',\n      'pageUp': 33,\n      33: 'pageUp',\n      'pageDown': 34,\n      34: 'pageDown',\n      'shift': 16,\n      16: 'shift',\n      'control': 17,\n      17: 'control',\n      'space': 32,\n      32: 'space',\n      't': 84,\n      84: 't',\n      'delete': 46,\n      46: 'delete'\n    },\n        ViewModes = ['times', 'days', 'months', 'years', 'decades'],\n        keyState = {},\n        keyPressHandled = {};\n    var Default = {\n      timeZone: '',\n      format: false,\n      dayViewHeaderFormat: 'MMMM YYYY',\n      extraFormats: false,\n      stepping: 1,\n      minDate: false,\n      maxDate: false,\n      useCurrent: true,\n      collapse: true,\n      locale: moment.locale(),\n      defaultDate: false,\n      disabledDates: false,\n      enabledDates: false,\n      icons: {\n        time: 'fa fa-clock-o',\n        date: 'fa fa-calendar',\n        up: 'fa fa-arrow-up',\n        down: 'fa fa-arrow-down',\n        previous: 'fa fa-chevron-left',\n        next: 'fa fa-chevron-right',\n        today: 'fa fa-calendar-check-o',\n        clear: 'fa fa-delete',\n        close: 'fa fa-times'\n      },\n      tooltips: {\n        today: 'Go to today',\n        clear: 'Clear selection',\n        close: 'Close the picker',\n        selectMonth: 'Select Month',\n        prevMonth: 'Previous Month',\n        nextMonth: 'Next Month',\n        selectYear: 'Select Year',\n        prevYear: 'Previous Year',\n        nextYear: 'Next Year',\n        selectDecade: 'Select Decade',\n        prevDecade: 'Previous Decade',\n        nextDecade: 'Next Decade',\n        prevCentury: 'Previous Century',\n        nextCentury: 'Next Century',\n        pickHour: 'Pick Hour',\n        incrementHour: 'Increment Hour',\n        decrementHour: 'Decrement Hour',\n        pickMinute: 'Pick Minute',\n        incrementMinute: 'Increment Minute',\n        decrementMinute: 'Decrement Minute',\n        pickSecond: 'Pick Second',\n        incrementSecond: 'Increment Second',\n        decrementSecond: 'Decrement Second',\n        togglePeriod: 'Toggle Period',\n        selectTime: 'Select Time',\n        selectDate: 'Select Date'\n      },\n      useStrict: false,\n      sideBySide: false,\n      daysOfWeekDisabled: false,\n      calendarWeeks: false,\n      viewMode: 'days',\n      toolbarPlacement: 'default',\n      buttons: {\n        showToday: false,\n        showClear: false,\n        showClose: false\n      },\n      widgetPositioning: {\n        horizontal: 'auto',\n        vertical: 'auto'\n      },\n      widgetParent: null,\n      ignoreReadonly: false,\n      keepOpen: false,\n      focusOnShow: true,\n      inline: false,\n      keepInvalid: false,\n      keyBinds: {\n        up: function up() {\n          if (!this.widget) {\n            return false;\n          }\n\n          var d = this._dates[0] || this.getMoment();\n\n          if (this.widget.find('.datepicker').is(':visible')) {\n            this.date(d.clone().subtract(7, 'd'));\n          } else {\n            this.date(d.clone().add(this.stepping(), 'm'));\n          }\n\n          return true;\n        },\n        down: function down() {\n          if (!this.widget) {\n            this.show();\n            return false;\n          }\n\n          var d = this._dates[0] || this.getMoment();\n\n          if (this.widget.find('.datepicker').is(':visible')) {\n            this.date(d.clone().add(7, 'd'));\n          } else {\n            this.date(d.clone().subtract(this.stepping(), 'm'));\n          }\n\n          return true;\n        },\n        'control up': function controlUp() {\n          if (!this.widget) {\n            return false;\n          }\n\n          var d = this._dates[0] || this.getMoment();\n\n          if (this.widget.find('.datepicker').is(':visible')) {\n            this.date(d.clone().subtract(1, 'y'));\n          } else {\n            this.date(d.clone().add(1, 'h'));\n          }\n\n          return true;\n        },\n        'control down': function controlDown() {\n          if (!this.widget) {\n            return false;\n          }\n\n          var d = this._dates[0] || this.getMoment();\n\n          if (this.widget.find('.datepicker').is(':visible')) {\n            this.date(d.clone().add(1, 'y'));\n          } else {\n            this.date(d.clone().subtract(1, 'h'));\n          }\n\n          return true;\n        },\n        left: function left() {\n          if (!this.widget) {\n            return false;\n          }\n\n          var d = this._dates[0] || this.getMoment();\n\n          if (this.widget.find('.datepicker').is(':visible')) {\n            this.date(d.clone().subtract(1, 'd'));\n          }\n\n          return true;\n        },\n        right: function right() {\n          if (!this.widget) {\n            return false;\n          }\n\n          var d = this._dates[0] || this.getMoment();\n\n          if (this.widget.find('.datepicker').is(':visible')) {\n            this.date(d.clone().add(1, 'd'));\n          }\n\n          return true;\n        },\n        pageUp: function pageUp() {\n          if (!this.widget) {\n            return false;\n          }\n\n          var d = this._dates[0] || this.getMoment();\n\n          if (this.widget.find('.datepicker').is(':visible')) {\n            this.date(d.clone().subtract(1, 'M'));\n          }\n\n          return true;\n        },\n        pageDown: function pageDown() {\n          if (!this.widget) {\n            return false;\n          }\n\n          var d = this._dates[0] || this.getMoment();\n\n          if (this.widget.find('.datepicker').is(':visible')) {\n            this.date(d.clone().add(1, 'M'));\n          }\n\n          return true;\n        },\n        enter: function enter() {\n          if (!this.widget) {\n            return false;\n          }\n\n          this.hide();\n          return true;\n        },\n        escape: function escape() {\n          if (!this.widget) {\n            return false;\n          }\n\n          this.hide();\n          return true;\n        },\n        'control space': function controlSpace() {\n          if (!this.widget) {\n            return false;\n          }\n\n          if (this.widget.find('.timepicker').is(':visible')) {\n            this.widget.find('.btn[data-action=\"togglePeriod\"]').click();\n          }\n\n          return true;\n        },\n        t: function t() {\n          if (!this.widget) {\n            return false;\n          }\n\n          this.date(this.getMoment());\n          return true;\n        },\n        'delete': function _delete() {\n          if (!this.widget) {\n            return false;\n          }\n\n          this.clear();\n          return true;\n        }\n      },\n      debug: false,\n      allowInputToggle: false,\n      disabledTimeIntervals: false,\n      disabledHours: false,\n      enabledHours: false,\n      viewDate: false,\n      allowMultidate: false,\n      multidateSeparator: ','\n    }; // ReSharper restore InconsistentNaming\n    // ReSharper disable once DeclarationHides\n    // ReSharper disable once InconsistentNaming\n\n    var DateTimePicker = function () {\n      /** @namespace eData.dateOptions */\n\n      /** @namespace moment.tz */\n      function DateTimePicker(element, options) {\n        _classCallCheck(this, DateTimePicker);\n\n        this._options = this._getOptions(options);\n        this._element = element;\n        this._dates = [];\n        this._datesFormatted = [];\n        this._viewDate = null;\n        this.unset = true;\n        this.component = false;\n        this.widget = false;\n        this.use24Hours = null;\n        this.actualFormat = null;\n        this.parseFormats = null;\n        this.currentViewMode = null;\n        this.MinViewModeNumber = 0;\n\n        this._int();\n      }\n      /**\r\n       * @return {string}\r\n       */\n      //private\n\n\n      DateTimePicker.prototype._int = function _int() {\n        var targetInput = this._element.data('target-input');\n\n        if (this._element.is('input')) {\n          this.input = this._element;\n        } else if (targetInput !== undefined) {\n          if (targetInput === 'nearest') {\n            this.input = this._element.find('input');\n          } else {\n            this.input = $(targetInput);\n          }\n        }\n\n        this._dates = [];\n        this._dates[0] = this.getMoment();\n        this._viewDate = this.getMoment().clone();\n        $.extend(true, this._options, this._dataToOptions());\n        this.options(this._options);\n\n        this._initFormatting();\n\n        if (this.input !== undefined && this.input.is('input') && this.input.val().trim().length !== 0) {\n          this._setValue(this._parseInputDate(this.input.val().trim()), 0);\n        } else if (this._options.defaultDate && this.input !== undefined && this.input.attr('placeholder') === undefined) {\n          this._setValue(this._options.defaultDate, 0);\n        }\n\n        if (this._options.inline) {\n          this.show();\n        }\n      };\n\n      DateTimePicker.prototype._update = function _update() {\n        if (!this.widget) {\n          return;\n        }\n\n        this._fillDate();\n\n        this._fillTime();\n      };\n\n      DateTimePicker.prototype._setValue = function _setValue(targetMoment, index) {\n        var oldDate = this.unset ? null : this._dates[index];\n        var outpValue = ''; // case of calling setValue(null or false)\n\n        if (!targetMoment) {\n          if (!this._options.allowMultidate || this._dates.length === 1) {\n            this.unset = true;\n            this._dates = [];\n            this._datesFormatted = [];\n          } else {\n            outpValue = this._element.data('date') + ',';\n            outpValue = outpValue.replace(oldDate.format(this.actualFormat) + ',', '').replace(',,', '').replace(/,\\s*$/, '');\n\n            this._dates.splice(index, 1);\n\n            this._datesFormatted.splice(index, 1);\n          }\n\n          if (this.input !== undefined) {\n            this.input.val(outpValue);\n            this.input.trigger('input');\n          }\n\n          this._element.data('date', outpValue);\n\n          this._notifyEvent({\n            type: DateTimePicker.Event.CHANGE,\n            date: false,\n            oldDate: oldDate\n          });\n\n          this._update();\n\n          return;\n        }\n\n        targetMoment = targetMoment.clone().locale(this._options.locale);\n\n        if (this._hasTimeZone()) {\n          targetMoment.tz(this._options.timeZone);\n        }\n\n        if (this._options.stepping !== 1) {\n          targetMoment.minutes(Math.round(targetMoment.minutes() / this._options.stepping) * this._options.stepping).seconds(0);\n        }\n\n        if (this._isValid(targetMoment)) {\n          this._dates[index] = targetMoment;\n          this._datesFormatted[index] = targetMoment.format('YYYY-MM-DD');\n          this._viewDate = targetMoment.clone();\n\n          if (this._options.allowMultidate && this._dates.length > 1) {\n            for (var i = 0; i < this._dates.length; i++) {\n              outpValue += '' + this._dates[i].format(this.actualFormat) + this._options.multidateSeparator;\n            }\n\n            outpValue = outpValue.replace(/,\\s*$/, '');\n          } else {\n            outpValue = this._dates[index].format(this.actualFormat);\n          }\n\n          if (this.input !== undefined) {\n            this.input.val(outpValue);\n            this.input.trigger('input');\n          }\n\n          this._element.data('date', outpValue);\n\n          this.unset = false;\n\n          this._update();\n\n          this._notifyEvent({\n            type: DateTimePicker.Event.CHANGE,\n            date: this._dates[index].clone(),\n            oldDate: oldDate\n          });\n        } else {\n          if (!this._options.keepInvalid) {\n            if (this.input !== undefined) {\n              this.input.val('' + (this.unset ? '' : this._dates[index].format(this.actualFormat)));\n              this.input.trigger('input');\n            }\n          } else {\n            this._notifyEvent({\n              type: DateTimePicker.Event.CHANGE,\n              date: targetMoment,\n              oldDate: oldDate\n            });\n          }\n\n          this._notifyEvent({\n            type: DateTimePicker.Event.ERROR,\n            date: targetMoment,\n            oldDate: oldDate\n          });\n        }\n      };\n\n      DateTimePicker.prototype._change = function _change(e) {\n        var val = $(e.target).val().trim(),\n            parsedDate = val ? this._parseInputDate(val) : null;\n\n        this._setValue(parsedDate);\n\n        e.stopImmediatePropagation();\n        return false;\n      }; //noinspection JSMethodCanBeStatic\n\n\n      DateTimePicker.prototype._getOptions = function _getOptions(options) {\n        options = $.extend(true, {}, Default, options);\n        return options;\n      };\n\n      DateTimePicker.prototype._hasTimeZone = function _hasTimeZone() {\n        return moment.tz !== undefined && this._options.timeZone !== undefined && this._options.timeZone !== null && this._options.timeZone !== '';\n      };\n\n      DateTimePicker.prototype._isEnabled = function _isEnabled(granularity) {\n        if (typeof granularity !== 'string' || granularity.length > 1) {\n          throw new TypeError('isEnabled expects a single character string parameter');\n        }\n\n        switch (granularity) {\n          case 'y':\n            return this.actualFormat.indexOf('Y') !== -1;\n\n          case 'M':\n            return this.actualFormat.indexOf('M') !== -1;\n\n          case 'd':\n            return this.actualFormat.toLowerCase().indexOf('d') !== -1;\n\n          case 'h':\n          case 'H':\n            return this.actualFormat.toLowerCase().indexOf('h') !== -1;\n\n          case 'm':\n            return this.actualFormat.indexOf('m') !== -1;\n\n          case 's':\n            return this.actualFormat.indexOf('s') !== -1;\n\n          case 'a':\n          case 'A':\n            return this.actualFormat.toLowerCase().indexOf('a') !== -1;\n\n          default:\n            return false;\n        }\n      };\n\n      DateTimePicker.prototype._hasTime = function _hasTime() {\n        return this._isEnabled('h') || this._isEnabled('m') || this._isEnabled('s');\n      };\n\n      DateTimePicker.prototype._hasDate = function _hasDate() {\n        return this._isEnabled('y') || this._isEnabled('M') || this._isEnabled('d');\n      };\n\n      DateTimePicker.prototype._dataToOptions = function _dataToOptions() {\n        var eData = this._element.data();\n\n        var dataOptions = {};\n\n        if (eData.dateOptions && eData.dateOptions instanceof Object) {\n          dataOptions = $.extend(true, dataOptions, eData.dateOptions);\n        }\n\n        $.each(this._options, function (key) {\n          var attributeName = 'date' + key.charAt(0).toUpperCase() + key.slice(1); //todo data api key\n\n          if (eData[attributeName] !== undefined) {\n            dataOptions[key] = eData[attributeName];\n          } else {\n            delete dataOptions[key];\n          }\n        });\n        return dataOptions;\n      };\n\n      DateTimePicker.prototype._notifyEvent = function _notifyEvent(e) {\n        if (e.type === DateTimePicker.Event.CHANGE && e.date && e.date.isSame(e.oldDate) || !e.date && !e.oldDate) {\n          return;\n        }\n\n        this._element.trigger(e);\n      };\n\n      DateTimePicker.prototype._viewUpdate = function _viewUpdate(e) {\n        if (e === 'y') {\n          e = 'YYYY';\n        }\n\n        this._notifyEvent({\n          type: DateTimePicker.Event.UPDATE,\n          change: e,\n          viewDate: this._viewDate.clone()\n        });\n      };\n\n      DateTimePicker.prototype._showMode = function _showMode(dir) {\n        if (!this.widget) {\n          return;\n        }\n\n        if (dir) {\n          this.currentViewMode = Math.max(this.MinViewModeNumber, Math.min(3, this.currentViewMode + dir));\n        }\n\n        this.widget.find('.datepicker > div').hide().filter('.datepicker-' + DatePickerModes[this.currentViewMode].CLASS_NAME).show();\n      };\n\n      DateTimePicker.prototype._isInDisabledDates = function _isInDisabledDates(testDate) {\n        return this._options.disabledDates[testDate.format('YYYY-MM-DD')] === true;\n      };\n\n      DateTimePicker.prototype._isInEnabledDates = function _isInEnabledDates(testDate) {\n        return this._options.enabledDates[testDate.format('YYYY-MM-DD')] === true;\n      };\n\n      DateTimePicker.prototype._isInDisabledHours = function _isInDisabledHours(testDate) {\n        return this._options.disabledHours[testDate.format('H')] === true;\n      };\n\n      DateTimePicker.prototype._isInEnabledHours = function _isInEnabledHours(testDate) {\n        return this._options.enabledHours[testDate.format('H')] === true;\n      };\n\n      DateTimePicker.prototype._isValid = function _isValid(targetMoment, granularity) {\n        if (!targetMoment.isValid()) {\n          return false;\n        }\n\n        if (this._options.disabledDates && granularity === 'd' && this._isInDisabledDates(targetMoment)) {\n          return false;\n        }\n\n        if (this._options.enabledDates && granularity === 'd' && !this._isInEnabledDates(targetMoment)) {\n          return false;\n        }\n\n        if (this._options.minDate && targetMoment.isBefore(this._options.minDate, granularity)) {\n          return false;\n        }\n\n        if (this._options.maxDate && targetMoment.isAfter(this._options.maxDate, granularity)) {\n          return false;\n        }\n\n        if (this._options.daysOfWeekDisabled && granularity === 'd' && this._options.daysOfWeekDisabled.indexOf(targetMoment.day()) !== -1) {\n          return false;\n        }\n\n        if (this._options.disabledHours && (granularity === 'h' || granularity === 'm' || granularity === 's') && this._isInDisabledHours(targetMoment)) {\n          return false;\n        }\n\n        if (this._options.enabledHours && (granularity === 'h' || granularity === 'm' || granularity === 's') && !this._isInEnabledHours(targetMoment)) {\n          return false;\n        }\n\n        if (this._options.disabledTimeIntervals && (granularity === 'h' || granularity === 'm' || granularity === 's')) {\n          var found = false;\n          $.each(this._options.disabledTimeIntervals, function () {\n            if (targetMoment.isBetween(this[0], this[1])) {\n              found = true;\n              return false;\n            }\n          });\n\n          if (found) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      DateTimePicker.prototype._parseInputDate = function _parseInputDate(inputDate) {\n        if (this._options.parseInputDate === undefined) {\n          if (!moment.isMoment(inputDate)) {\n            inputDate = this.getMoment(inputDate);\n          }\n        } else {\n          inputDate = this._options.parseInputDate(inputDate);\n        } //inputDate.locale(this.options.locale);\n\n\n        return inputDate;\n      };\n\n      DateTimePicker.prototype._keydown = function _keydown(e) {\n        var handler = null,\n            index = void 0,\n            index2 = void 0,\n            keyBindKeys = void 0,\n            allModifiersPressed = void 0;\n        var pressedKeys = [],\n            pressedModifiers = {},\n            currentKey = e.which,\n            pressed = 'p';\n        keyState[currentKey] = pressed;\n\n        for (index in keyState) {\n          if (keyState.hasOwnProperty(index) && keyState[index] === pressed) {\n            pressedKeys.push(index);\n\n            if (parseInt(index, 10) !== currentKey) {\n              pressedModifiers[index] = true;\n            }\n          }\n        }\n\n        for (index in this._options.keyBinds) {\n          if (this._options.keyBinds.hasOwnProperty(index) && typeof this._options.keyBinds[index] === 'function') {\n            keyBindKeys = index.split(' ');\n\n            if (keyBindKeys.length === pressedKeys.length && KeyMap[currentKey] === keyBindKeys[keyBindKeys.length - 1]) {\n              allModifiersPressed = true;\n\n              for (index2 = keyBindKeys.length - 2; index2 >= 0; index2--) {\n                if (!(KeyMap[keyBindKeys[index2]] in pressedModifiers)) {\n                  allModifiersPressed = false;\n                  break;\n                }\n              }\n\n              if (allModifiersPressed) {\n                handler = this._options.keyBinds[index];\n                break;\n              }\n            }\n          }\n        }\n\n        if (handler) {\n          if (handler.call(this)) {\n            e.stopPropagation();\n            e.preventDefault();\n          }\n        }\n      }; //noinspection JSMethodCanBeStatic,SpellCheckingInspection\n\n\n      DateTimePicker.prototype._keyup = function _keyup(e) {\n        keyState[e.which] = 'r';\n\n        if (keyPressHandled[e.which]) {\n          keyPressHandled[e.which] = false;\n          e.stopPropagation();\n          e.preventDefault();\n        }\n      };\n\n      DateTimePicker.prototype._indexGivenDates = function _indexGivenDates(givenDatesArray) {\n        // Store given enabledDates and disabledDates as keys.\n        // This way we can check their existence in O(1) time instead of looping through whole array.\n        // (for example: options.enabledDates['2014-02-27'] === true)\n        var givenDatesIndexed = {},\n            self = this;\n        $.each(givenDatesArray, function () {\n          var dDate = self._parseInputDate(this);\n\n          if (dDate.isValid()) {\n            givenDatesIndexed[dDate.format('YYYY-MM-DD')] = true;\n          }\n        });\n        return Object.keys(givenDatesIndexed).length ? givenDatesIndexed : false;\n      };\n\n      DateTimePicker.prototype._indexGivenHours = function _indexGivenHours(givenHoursArray) {\n        // Store given enabledHours and disabledHours as keys.\n        // This way we can check their existence in O(1) time instead of looping through whole array.\n        // (for example: options.enabledHours['2014-02-27'] === true)\n        var givenHoursIndexed = {};\n        $.each(givenHoursArray, function () {\n          givenHoursIndexed[this] = true;\n        });\n        return Object.keys(givenHoursIndexed).length ? givenHoursIndexed : false;\n      };\n\n      DateTimePicker.prototype._initFormatting = function _initFormatting() {\n        var format = this._options.format || 'L LT',\n            self = this;\n        this.actualFormat = format.replace(/(\\[[^\\[]*])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function (formatInput) {\n          return self._dates[0].localeData().longDateFormat(formatInput) || formatInput; //todo taking the first date should be ok\n        });\n        this.parseFormats = this._options.extraFormats ? this._options.extraFormats.slice() : [];\n\n        if (this.parseFormats.indexOf(format) < 0 && this.parseFormats.indexOf(this.actualFormat) < 0) {\n          this.parseFormats.push(this.actualFormat);\n        }\n\n        this.use24Hours = this.actualFormat.toLowerCase().indexOf('a') < 1 && this.actualFormat.replace(/\\[.*?]/g, '').indexOf('h') < 1;\n\n        if (this._isEnabled('y')) {\n          this.MinViewModeNumber = 2;\n        }\n\n        if (this._isEnabled('M')) {\n          this.MinViewModeNumber = 1;\n        }\n\n        if (this._isEnabled('d')) {\n          this.MinViewModeNumber = 0;\n        }\n\n        this.currentViewMode = Math.max(this.MinViewModeNumber, this.currentViewMode);\n\n        if (!this.unset) {\n          this._setValue(this._dates[0], 0);\n        }\n      };\n\n      DateTimePicker.prototype._getLastPickedDate = function _getLastPickedDate() {\n        return this._dates[this._getLastPickedDateIndex()];\n      };\n\n      DateTimePicker.prototype._getLastPickedDateIndex = function _getLastPickedDateIndex() {\n        return this._dates.length - 1;\n      }; //public\n\n\n      DateTimePicker.prototype.getMoment = function getMoment(d) {\n        var returnMoment = void 0;\n\n        if (d === undefined || d === null) {\n          returnMoment = moment(); //TODO should this use format? and locale?\n        } else if (this._hasTimeZone()) {\n          // There is a string to parse and a default time zone\n          // parse with the tz function which takes a default time zone if it is not in the format string\n          returnMoment = moment.tz(d, this.parseFormats, this._options.locale, this._options.useStrict, this._options.timeZone);\n        } else {\n          returnMoment = moment(d, this.parseFormats, this._options.locale, this._options.useStrict);\n        }\n\n        if (this._hasTimeZone()) {\n          returnMoment.tz(this._options.timeZone);\n        }\n\n        return returnMoment;\n      };\n\n      DateTimePicker.prototype.toggle = function toggle() {\n        return this.widget ? this.hide() : this.show();\n      };\n\n      DateTimePicker.prototype.ignoreReadonly = function ignoreReadonly(_ignoreReadonly) {\n        if (arguments.length === 0) {\n          return this._options.ignoreReadonly;\n        }\n\n        if (typeof _ignoreReadonly !== 'boolean') {\n          throw new TypeError('ignoreReadonly () expects a boolean parameter');\n        }\n\n        this._options.ignoreReadonly = _ignoreReadonly;\n      };\n\n      DateTimePicker.prototype.options = function options(newOptions) {\n        if (arguments.length === 0) {\n          return $.extend(true, {}, this._options);\n        }\n\n        if (!(newOptions instanceof Object)) {\n          throw new TypeError('options() this.options parameter should be an object');\n        }\n\n        $.extend(true, this._options, newOptions);\n        var self = this;\n        $.each(this._options, function (key, value) {\n          if (self[key] !== undefined) {\n            self[key](value);\n          }\n        });\n      };\n\n      DateTimePicker.prototype.date = function date(newDate, index) {\n        index = index || 0;\n\n        if (arguments.length === 0) {\n          if (this.unset) {\n            return null;\n          }\n\n          if (this._options.allowMultidate) {\n            return this._dates.join(this._options.multidateSeparator);\n          } else {\n            return this._dates[index].clone();\n          }\n        }\n\n        if (newDate !== null && typeof newDate !== 'string' && !moment.isMoment(newDate) && !(newDate instanceof Date)) {\n          throw new TypeError('date() parameter must be one of [null, string, moment or Date]');\n        }\n\n        this._setValue(newDate === null ? null : this._parseInputDate(newDate), index);\n      };\n\n      DateTimePicker.prototype.format = function format(newFormat) {\n        if (arguments.length === 0) {\n          return this._options.format;\n        }\n\n        if (typeof newFormat !== 'string' && (typeof newFormat !== 'boolean' || newFormat !== false)) {\n          throw new TypeError('format() expects a string or boolean:false parameter ' + newFormat);\n        }\n\n        this._options.format = newFormat;\n\n        if (this.actualFormat) {\n          this._initFormatting(); // reinitialize formatting\n\n        }\n      };\n\n      DateTimePicker.prototype.timeZone = function timeZone(newZone) {\n        if (arguments.length === 0) {\n          return this._options.timeZone;\n        }\n\n        if (typeof newZone !== 'string') {\n          throw new TypeError('newZone() expects a string parameter');\n        }\n\n        this._options.timeZone = newZone;\n      };\n\n      DateTimePicker.prototype.dayViewHeaderFormat = function dayViewHeaderFormat(newFormat) {\n        if (arguments.length === 0) {\n          return this._options.dayViewHeaderFormat;\n        }\n\n        if (typeof newFormat !== 'string') {\n          throw new TypeError('dayViewHeaderFormat() expects a string parameter');\n        }\n\n        this._options.dayViewHeaderFormat = newFormat;\n      };\n\n      DateTimePicker.prototype.extraFormats = function extraFormats(formats) {\n        if (arguments.length === 0) {\n          return this._options.extraFormats;\n        }\n\n        if (formats !== false && !(formats instanceof Array)) {\n          throw new TypeError('extraFormats() expects an array or false parameter');\n        }\n\n        this._options.extraFormats = formats;\n\n        if (this.parseFormats) {\n          this._initFormatting(); // reinit formatting\n\n        }\n      };\n\n      DateTimePicker.prototype.disabledDates = function disabledDates(dates) {\n        if (arguments.length === 0) {\n          return this._options.disabledDates ? $.extend({}, this._options.disabledDates) : this._options.disabledDates;\n        }\n\n        if (!dates) {\n          this._options.disabledDates = false;\n\n          this._update();\n\n          return true;\n        }\n\n        if (!(dates instanceof Array)) {\n          throw new TypeError('disabledDates() expects an array parameter');\n        }\n\n        this._options.disabledDates = this._indexGivenDates(dates);\n        this._options.enabledDates = false;\n\n        this._update();\n      };\n\n      DateTimePicker.prototype.enabledDates = function enabledDates(dates) {\n        if (arguments.length === 0) {\n          return this._options.enabledDates ? $.extend({}, this._options.enabledDates) : this._options.enabledDates;\n        }\n\n        if (!dates) {\n          this._options.enabledDates = false;\n\n          this._update();\n\n          return true;\n        }\n\n        if (!(dates instanceof Array)) {\n          throw new TypeError('enabledDates() expects an array parameter');\n        }\n\n        this._options.enabledDates = this._indexGivenDates(dates);\n        this._options.disabledDates = false;\n\n        this._update();\n      };\n\n      DateTimePicker.prototype.daysOfWeekDisabled = function daysOfWeekDisabled(_daysOfWeekDisabled) {\n        if (arguments.length === 0) {\n          return this._options.daysOfWeekDisabled.splice(0);\n        }\n\n        if (typeof _daysOfWeekDisabled === 'boolean' && !_daysOfWeekDisabled) {\n          this._options.daysOfWeekDisabled = false;\n\n          this._update();\n\n          return true;\n        }\n\n        if (!(_daysOfWeekDisabled instanceof Array)) {\n          throw new TypeError('daysOfWeekDisabled() expects an array parameter');\n        }\n\n        this._options.daysOfWeekDisabled = _daysOfWeekDisabled.reduce(function (previousValue, currentValue) {\n          currentValue = parseInt(currentValue, 10);\n\n          if (currentValue > 6 || currentValue < 0 || isNaN(currentValue)) {\n            return previousValue;\n          }\n\n          if (previousValue.indexOf(currentValue) === -1) {\n            previousValue.push(currentValue);\n          }\n\n          return previousValue;\n        }, []).sort();\n\n        if (this._options.useCurrent && !this._options.keepInvalid) {\n          for (var i = 0; i < this._dates.length; i++) {\n            var tries = 0;\n\n            while (!this._isValid(this._dates[i], 'd')) {\n              this._dates[i].add(1, 'd');\n\n              if (tries === 31) {\n                throw 'Tried 31 times to find a valid date';\n              }\n\n              tries++;\n            }\n\n            this._setValue(this._dates[i], i);\n          }\n        }\n\n        this._update();\n      };\n\n      DateTimePicker.prototype.maxDate = function maxDate(_maxDate) {\n        if (arguments.length === 0) {\n          return this._options.maxDate ? this._options.maxDate.clone() : this._options.maxDate;\n        }\n\n        if (typeof _maxDate === 'boolean' && _maxDate === false) {\n          this._options.maxDate = false;\n\n          this._update();\n\n          return true;\n        }\n\n        if (typeof _maxDate === 'string') {\n          if (_maxDate === 'now' || _maxDate === 'moment') {\n            _maxDate = this.getMoment();\n          }\n        }\n\n        var parsedDate = this._parseInputDate(_maxDate);\n\n        if (!parsedDate.isValid()) {\n          throw new TypeError('maxDate() Could not parse date parameter: ' + _maxDate);\n        }\n\n        if (this._options.minDate && parsedDate.isBefore(this._options.minDate)) {\n          throw new TypeError('maxDate() date parameter is before this.options.minDate: ' + parsedDate.format(this.actualFormat));\n        }\n\n        this._options.maxDate = parsedDate;\n\n        for (var i = 0; i < this._dates.length; i++) {\n          if (this._options.useCurrent && !this._options.keepInvalid && this._dates[i].isAfter(_maxDate)) {\n            this._setValue(this._options.maxDate, i);\n          }\n        }\n\n        if (this._viewDate.isAfter(parsedDate)) {\n          this._viewDate = parsedDate.clone().subtract(this._options.stepping, 'm');\n        }\n\n        this._update();\n      };\n\n      DateTimePicker.prototype.minDate = function minDate(_minDate) {\n        if (arguments.length === 0) {\n          return this._options.minDate ? this._options.minDate.clone() : this._options.minDate;\n        }\n\n        if (typeof _minDate === 'boolean' && _minDate === false) {\n          this._options.minDate = false;\n\n          this._update();\n\n          return true;\n        }\n\n        if (typeof _minDate === 'string') {\n          if (_minDate === 'now' || _minDate === 'moment') {\n            _minDate = this.getMoment();\n          }\n        }\n\n        var parsedDate = this._parseInputDate(_minDate);\n\n        if (!parsedDate.isValid()) {\n          throw new TypeError('minDate() Could not parse date parameter: ' + _minDate);\n        }\n\n        if (this._options.maxDate && parsedDate.isAfter(this._options.maxDate)) {\n          throw new TypeError('minDate() date parameter is after this.options.maxDate: ' + parsedDate.format(this.actualFormat));\n        }\n\n        this._options.minDate = parsedDate;\n\n        for (var i = 0; i < this._dates.length; i++) {\n          if (this._options.useCurrent && !this._options.keepInvalid && this._dates[i].isBefore(_minDate)) {\n            this._setValue(this._options.minDate, i);\n          }\n        }\n\n        if (this._viewDate.isBefore(parsedDate)) {\n          this._viewDate = parsedDate.clone().add(this._options.stepping, 'm');\n        }\n\n        this._update();\n      };\n\n      DateTimePicker.prototype.defaultDate = function defaultDate(_defaultDate) {\n        if (arguments.length === 0) {\n          return this._options.defaultDate ? this._options.defaultDate.clone() : this._options.defaultDate;\n        }\n\n        if (!_defaultDate) {\n          this._options.defaultDate = false;\n          return true;\n        }\n\n        if (typeof _defaultDate === 'string') {\n          if (_defaultDate === 'now' || _defaultDate === 'moment') {\n            _defaultDate = this.getMoment();\n          } else {\n            _defaultDate = this.getMoment(_defaultDate);\n          }\n        }\n\n        var parsedDate = this._parseInputDate(_defaultDate);\n\n        if (!parsedDate.isValid()) {\n          throw new TypeError('defaultDate() Could not parse date parameter: ' + _defaultDate);\n        }\n\n        if (!this._isValid(parsedDate)) {\n          throw new TypeError('defaultDate() date passed is invalid according to component setup validations');\n        }\n\n        this._options.defaultDate = parsedDate;\n\n        if (this._options.defaultDate && this._options.inline || this.input !== undefined && this.input.val().trim() === '') {\n          this._setValue(this._options.defaultDate, 0);\n        }\n      };\n\n      DateTimePicker.prototype.locale = function locale(_locale) {\n        if (arguments.length === 0) {\n          return this._options.locale;\n        }\n\n        if (!moment.localeData(_locale)) {\n          throw new TypeError('locale() locale ' + _locale + ' is not loaded from moment locales!');\n        }\n\n        this._options.locale = _locale;\n\n        for (var i = 0; i < this._dates.length; i++) {\n          this._dates[i].locale(this._options.locale);\n        }\n\n        this._viewDate.locale(this._options.locale);\n\n        if (this.actualFormat) {\n          this._initFormatting(); // reinitialize formatting\n\n        }\n\n        if (this.widget) {\n          this.hide();\n          this.show();\n        }\n      };\n\n      DateTimePicker.prototype.stepping = function stepping(_stepping) {\n        if (arguments.length === 0) {\n          return this._options.stepping;\n        }\n\n        _stepping = parseInt(_stepping, 10);\n\n        if (isNaN(_stepping) || _stepping < 1) {\n          _stepping = 1;\n        }\n\n        this._options.stepping = _stepping;\n      };\n\n      DateTimePicker.prototype.useCurrent = function useCurrent(_useCurrent) {\n        var useCurrentOptions = ['year', 'month', 'day', 'hour', 'minute'];\n\n        if (arguments.length === 0) {\n          return this._options.useCurrent;\n        }\n\n        if (typeof _useCurrent !== 'boolean' && typeof _useCurrent !== 'string') {\n          throw new TypeError('useCurrent() expects a boolean or string parameter');\n        }\n\n        if (typeof _useCurrent === 'string' && useCurrentOptions.indexOf(_useCurrent.toLowerCase()) === -1) {\n          throw new TypeError('useCurrent() expects a string parameter of ' + useCurrentOptions.join(', '));\n        }\n\n        this._options.useCurrent = _useCurrent;\n      };\n\n      DateTimePicker.prototype.collapse = function collapse(_collapse) {\n        if (arguments.length === 0) {\n          return this._options.collapse;\n        }\n\n        if (typeof _collapse !== 'boolean') {\n          throw new TypeError('collapse() expects a boolean parameter');\n        }\n\n        if (this._options.collapse === _collapse) {\n          return true;\n        }\n\n        this._options.collapse = _collapse;\n\n        if (this.widget) {\n          this.hide();\n          this.show();\n        }\n      };\n\n      DateTimePicker.prototype.icons = function icons(_icons) {\n        if (arguments.length === 0) {\n          return $.extend({}, this._options.icons);\n        }\n\n        if (!(_icons instanceof Object)) {\n          throw new TypeError('icons() expects parameter to be an Object');\n        }\n\n        $.extend(this._options.icons, _icons);\n\n        if (this.widget) {\n          this.hide();\n          this.show();\n        }\n      };\n\n      DateTimePicker.prototype.tooltips = function tooltips(_tooltips) {\n        if (arguments.length === 0) {\n          return $.extend({}, this._options.tooltips);\n        }\n\n        if (!(_tooltips instanceof Object)) {\n          throw new TypeError('tooltips() expects parameter to be an Object');\n        }\n\n        $.extend(this._options.tooltips, _tooltips);\n\n        if (this.widget) {\n          this.hide();\n          this.show();\n        }\n      };\n\n      DateTimePicker.prototype.useStrict = function useStrict(_useStrict) {\n        if (arguments.length === 0) {\n          return this._options.useStrict;\n        }\n\n        if (typeof _useStrict !== 'boolean') {\n          throw new TypeError('useStrict() expects a boolean parameter');\n        }\n\n        this._options.useStrict = _useStrict;\n      };\n\n      DateTimePicker.prototype.sideBySide = function sideBySide(_sideBySide) {\n        if (arguments.length === 0) {\n          return this._options.sideBySide;\n        }\n\n        if (typeof _sideBySide !== 'boolean') {\n          throw new TypeError('sideBySide() expects a boolean parameter');\n        }\n\n        this._options.sideBySide = _sideBySide;\n\n        if (this.widget) {\n          this.hide();\n          this.show();\n        }\n      };\n\n      DateTimePicker.prototype.viewMode = function viewMode(_viewMode) {\n        if (arguments.length === 0) {\n          return this._options.viewMode;\n        }\n\n        if (typeof _viewMode !== 'string') {\n          throw new TypeError('viewMode() expects a string parameter');\n        }\n\n        if (DateTimePicker.ViewModes.indexOf(_viewMode) === -1) {\n          throw new TypeError('viewMode() parameter must be one of (' + DateTimePicker.ViewModes.join(', ') + ') value');\n        }\n\n        this._options.viewMode = _viewMode;\n        this.currentViewMode = Math.max(DateTimePicker.ViewModes.indexOf(_viewMode) - 1, this.MinViewModeNumber);\n\n        this._showMode();\n      };\n\n      DateTimePicker.prototype.calendarWeeks = function calendarWeeks(_calendarWeeks) {\n        if (arguments.length === 0) {\n          return this._options.calendarWeeks;\n        }\n\n        if (typeof _calendarWeeks !== 'boolean') {\n          throw new TypeError('calendarWeeks() expects parameter to be a boolean value');\n        }\n\n        this._options.calendarWeeks = _calendarWeeks;\n\n        this._update();\n      };\n\n      DateTimePicker.prototype.buttons = function buttons(_buttons) {\n        if (arguments.length === 0) {\n          return $.extend({}, this._options.buttons);\n        }\n\n        if (!(_buttons instanceof Object)) {\n          throw new TypeError('buttons() expects parameter to be an Object');\n        }\n\n        $.extend(this._options.buttons, _buttons);\n\n        if (typeof this._options.buttons.showToday !== 'boolean') {\n          throw new TypeError('buttons.showToday expects a boolean parameter');\n        }\n\n        if (typeof this._options.buttons.showClear !== 'boolean') {\n          throw new TypeError('buttons.showClear expects a boolean parameter');\n        }\n\n        if (typeof this._options.buttons.showClose !== 'boolean') {\n          throw new TypeError('buttons.showClose expects a boolean parameter');\n        }\n\n        if (this.widget) {\n          this.hide();\n          this.show();\n        }\n      };\n\n      DateTimePicker.prototype.keepOpen = function keepOpen(_keepOpen) {\n        if (arguments.length === 0) {\n          return this._options.keepOpen;\n        }\n\n        if (typeof _keepOpen !== 'boolean') {\n          throw new TypeError('keepOpen() expects a boolean parameter');\n        }\n\n        this._options.keepOpen = _keepOpen;\n      };\n\n      DateTimePicker.prototype.focusOnShow = function focusOnShow(_focusOnShow) {\n        if (arguments.length === 0) {\n          return this._options.focusOnShow;\n        }\n\n        if (typeof _focusOnShow !== 'boolean') {\n          throw new TypeError('focusOnShow() expects a boolean parameter');\n        }\n\n        this._options.focusOnShow = _focusOnShow;\n      };\n\n      DateTimePicker.prototype.inline = function inline(_inline) {\n        if (arguments.length === 0) {\n          return this._options.inline;\n        }\n\n        if (typeof _inline !== 'boolean') {\n          throw new TypeError('inline() expects a boolean parameter');\n        }\n\n        this._options.inline = _inline;\n      };\n\n      DateTimePicker.prototype.clear = function clear() {\n        this._setValue(null); //todo\n\n      };\n\n      DateTimePicker.prototype.keyBinds = function keyBinds(_keyBinds) {\n        if (arguments.length === 0) {\n          return this._options.keyBinds;\n        }\n\n        this._options.keyBinds = _keyBinds;\n      };\n\n      DateTimePicker.prototype.debug = function debug(_debug) {\n        if (typeof _debug !== 'boolean') {\n          throw new TypeError('debug() expects a boolean parameter');\n        }\n\n        this._options.debug = _debug;\n      };\n\n      DateTimePicker.prototype.allowInputToggle = function allowInputToggle(_allowInputToggle) {\n        if (arguments.length === 0) {\n          return this._options.allowInputToggle;\n        }\n\n        if (typeof _allowInputToggle !== 'boolean') {\n          throw new TypeError('allowInputToggle() expects a boolean parameter');\n        }\n\n        this._options.allowInputToggle = _allowInputToggle;\n      };\n\n      DateTimePicker.prototype.keepInvalid = function keepInvalid(_keepInvalid) {\n        if (arguments.length === 0) {\n          return this._options.keepInvalid;\n        }\n\n        if (typeof _keepInvalid !== 'boolean') {\n          throw new TypeError('keepInvalid() expects a boolean parameter');\n        }\n\n        this._options.keepInvalid = _keepInvalid;\n      };\n\n      DateTimePicker.prototype.datepickerInput = function datepickerInput(_datepickerInput) {\n        if (arguments.length === 0) {\n          return this._options.datepickerInput;\n        }\n\n        if (typeof _datepickerInput !== 'string') {\n          throw new TypeError('datepickerInput() expects a string parameter');\n        }\n\n        this._options.datepickerInput = _datepickerInput;\n      };\n\n      DateTimePicker.prototype.parseInputDate = function parseInputDate(_parseInputDate2) {\n        if (arguments.length === 0) {\n          return this._options.parseInputDate;\n        }\n\n        if (typeof _parseInputDate2 !== 'function') {\n          throw new TypeError('parseInputDate() should be as function');\n        }\n\n        this._options.parseInputDate = _parseInputDate2;\n      };\n\n      DateTimePicker.prototype.disabledTimeIntervals = function disabledTimeIntervals(_disabledTimeIntervals) {\n        if (arguments.length === 0) {\n          return this._options.disabledTimeIntervals ? $.extend({}, this._options.disabledTimeIntervals) : this._options.disabledTimeIntervals;\n        }\n\n        if (!_disabledTimeIntervals) {\n          this._options.disabledTimeIntervals = false;\n\n          this._update();\n\n          return true;\n        }\n\n        if (!(_disabledTimeIntervals instanceof Array)) {\n          throw new TypeError('disabledTimeIntervals() expects an array parameter');\n        }\n\n        this._options.disabledTimeIntervals = _disabledTimeIntervals;\n\n        this._update();\n      };\n\n      DateTimePicker.prototype.disabledHours = function disabledHours(hours) {\n        if (arguments.length === 0) {\n          return this._options.disabledHours ? $.extend({}, this._options.disabledHours) : this._options.disabledHours;\n        }\n\n        if (!hours) {\n          this._options.disabledHours = false;\n\n          this._update();\n\n          return true;\n        }\n\n        if (!(hours instanceof Array)) {\n          throw new TypeError('disabledHours() expects an array parameter');\n        }\n\n        this._options.disabledHours = this._indexGivenHours(hours);\n        this._options.enabledHours = false;\n\n        if (this._options.useCurrent && !this._options.keepInvalid) {\n          for (var i = 0; i < this._dates.length; i++) {\n            var tries = 0;\n\n            while (!this._isValid(this._dates[i], 'h')) {\n              this._dates[i].add(1, 'h');\n\n              if (tries === 24) {\n                throw 'Tried 24 times to find a valid date';\n              }\n\n              tries++;\n            }\n\n            this._setValue(this._dates[i], i);\n          }\n        }\n\n        this._update();\n      };\n\n      DateTimePicker.prototype.enabledHours = function enabledHours(hours) {\n        if (arguments.length === 0) {\n          return this._options.enabledHours ? $.extend({}, this._options.enabledHours) : this._options.enabledHours;\n        }\n\n        if (!hours) {\n          this._options.enabledHours = false;\n\n          this._update();\n\n          return true;\n        }\n\n        if (!(hours instanceof Array)) {\n          throw new TypeError('enabledHours() expects an array parameter');\n        }\n\n        this._options.enabledHours = this._indexGivenHours(hours);\n        this._options.disabledHours = false;\n\n        if (this._options.useCurrent && !this._options.keepInvalid) {\n          for (var i = 0; i < this._dates.length; i++) {\n            var tries = 0;\n\n            while (!this._isValid(this._dates[i], 'h')) {\n              this._dates[i].add(1, 'h');\n\n              if (tries === 24) {\n                throw 'Tried 24 times to find a valid date';\n              }\n\n              tries++;\n            }\n\n            this._setValue(this._dates[i], i);\n          }\n        }\n\n        this._update();\n      };\n\n      DateTimePicker.prototype.viewDate = function viewDate(newDate) {\n        if (arguments.length === 0) {\n          return this._viewDate.clone();\n        }\n\n        if (!newDate) {\n          this._viewDate = (this._dates[0] || this.getMoment()).clone();\n          return true;\n        }\n\n        if (typeof newDate !== 'string' && !moment.isMoment(newDate) && !(newDate instanceof Date)) {\n          throw new TypeError('viewDate() parameter must be one of [string, moment or Date]');\n        }\n\n        this._viewDate = this._parseInputDate(newDate);\n\n        this._viewUpdate();\n      };\n\n      DateTimePicker.prototype.allowMultidate = function allowMultidate(_allowMultidate) {\n        if (typeof _allowMultidate !== 'boolean') {\n          throw new TypeError('allowMultidate() expects a boolean parameter');\n        }\n\n        this._options.allowMultidate = _allowMultidate;\n      };\n\n      DateTimePicker.prototype.multidateSeparator = function multidateSeparator(_multidateSeparator) {\n        if (arguments.length === 0) {\n          return this._options.multidateSeparator;\n        }\n\n        if (typeof _multidateSeparator !== 'string' || _multidateSeparator.length > 1) {\n          throw new TypeError('multidateSeparator expects a single character string parameter');\n        }\n\n        this._options.multidateSeparator = _multidateSeparator;\n      };\n\n      _createClass(DateTimePicker, null, [{\n        key: 'NAME',\n        get: function get() {\n          return NAME;\n        }\n        /**\r\n         * @return {string}\r\n         */\n\n      }, {\n        key: 'DATA_KEY',\n        get: function get() {\n          return DATA_KEY;\n        }\n        /**\r\n         * @return {string}\r\n         */\n\n      }, {\n        key: 'EVENT_KEY',\n        get: function get() {\n          return EVENT_KEY;\n        }\n        /**\r\n         * @return {string}\r\n         */\n\n      }, {\n        key: 'DATA_API_KEY',\n        get: function get() {\n          return DATA_API_KEY;\n        }\n      }, {\n        key: 'DatePickerModes',\n        get: function get() {\n          return DatePickerModes;\n        }\n      }, {\n        key: 'ViewModes',\n        get: function get() {\n          return ViewModes;\n        }\n      }, {\n        key: 'Event',\n        get: function get() {\n          return Event;\n        }\n      }, {\n        key: 'Selector',\n        get: function get() {\n          return Selector;\n        }\n      }, {\n        key: 'Default',\n        get: function get() {\n          return Default;\n        },\n        set: function set(value) {\n          Default = value;\n        }\n      }, {\n        key: 'ClassName',\n        get: function get() {\n          return ClassName;\n        }\n      }]);\n\n      return DateTimePicker;\n    }();\n\n    return DateTimePicker;\n  }(jQuery, moment); //noinspection JSUnusedGlobalSymbols\n\n  /* global DateTimePicker */\n\n\n  var TempusDominusBootstrap4 = function ($) {\n    // eslint-disable-line no-unused-vars\n    // ReSharper disable once InconsistentNaming\n    var JQUERY_NO_CONFLICT = $.fn[DateTimePicker.NAME],\n        verticalModes = ['top', 'bottom', 'auto'],\n        horizontalModes = ['left', 'right', 'auto'],\n        toolbarPlacements = ['default', 'top', 'bottom'],\n        getSelectorFromElement = function getSelectorFromElement($element) {\n      var selector = $element.data('target'),\n          $selector = void 0;\n\n      if (!selector) {\n        selector = $element.attr('href') || '';\n        selector = /^#[a-z]/i.test(selector) ? selector : null;\n      }\n\n      $selector = $(selector);\n\n      if ($selector.length === 0) {\n        return $selector;\n      }\n\n      if (!$selector.data(DateTimePicker.DATA_KEY)) {\n        $.extend({}, $selector.data(), $(this).data());\n      }\n\n      return $selector;\n    }; // ReSharper disable once InconsistentNaming\n\n\n    var TempusDominusBootstrap4 = function (_DateTimePicker) {\n      _inherits(TempusDominusBootstrap4, _DateTimePicker);\n\n      function TempusDominusBootstrap4(element, options) {\n        _classCallCheck(this, TempusDominusBootstrap4);\n\n        var _this = _possibleConstructorReturn(this, _DateTimePicker.call(this, element, options));\n\n        _this._init();\n\n        return _this;\n      }\n\n      TempusDominusBootstrap4.prototype._init = function _init() {\n        if (this._element.hasClass('input-group')) {\n          var datepickerButton = this._element.find('.datepickerbutton');\n\n          if (datepickerButton.length === 0) {\n            this.component = this._element.find('[data-toggle=\"datetimepicker\"]');\n          } else {\n            this.component = datepickerButton;\n          }\n        }\n      };\n\n      TempusDominusBootstrap4.prototype._getDatePickerTemplate = function _getDatePickerTemplate() {\n        var headTemplate = $('<thead>').append($('<tr>').append($('<th>').addClass('prev').attr('data-action', 'previous').append($('<span>').addClass(this._options.icons.previous))).append($('<th>').addClass('picker-switch').attr('data-action', 'pickerSwitch').attr('colspan', '' + (this._options.calendarWeeks ? '6' : '5'))).append($('<th>').addClass('next').attr('data-action', 'next').append($('<span>').addClass(this._options.icons.next)))),\n            contTemplate = $('<tbody>').append($('<tr>').append($('<td>').attr('colspan', '' + (this._options.calendarWeeks ? '8' : '7'))));\n        return [$('<div>').addClass('datepicker-days').append($('<table>').addClass('table table-sm').append(headTemplate).append($('<tbody>'))), $('<div>').addClass('datepicker-months').append($('<table>').addClass('table-condensed').append(headTemplate.clone()).append(contTemplate.clone())), $('<div>').addClass('datepicker-years').append($('<table>').addClass('table-condensed').append(headTemplate.clone()).append(contTemplate.clone())), $('<div>').addClass('datepicker-decades').append($('<table>').addClass('table-condensed').append(headTemplate.clone()).append(contTemplate.clone()))];\n      };\n\n      TempusDominusBootstrap4.prototype._getTimePickerMainTemplate = function _getTimePickerMainTemplate() {\n        var topRow = $('<tr>'),\n            middleRow = $('<tr>'),\n            bottomRow = $('<tr>');\n\n        if (this._isEnabled('h')) {\n          topRow.append($('<td>').append($('<a>').attr({\n            href: '#',\n            tabindex: '-1',\n            'title': this._options.tooltips.incrementHour\n          }).addClass('btn').attr('data-action', 'incrementHours').append($('<span>').addClass(this._options.icons.up))));\n          middleRow.append($('<td>').append($('<span>').addClass('timepicker-hour').attr({\n            'data-time-component': 'hours',\n            'title': this._options.tooltips.pickHour\n          }).attr('data-action', 'showHours')));\n          bottomRow.append($('<td>').append($('<a>').attr({\n            href: '#',\n            tabindex: '-1',\n            'title': this._options.tooltips.decrementHour\n          }).addClass('btn').attr('data-action', 'decrementHours').append($('<span>').addClass(this._options.icons.down))));\n        }\n\n        if (this._isEnabled('m')) {\n          if (this._isEnabled('h')) {\n            topRow.append($('<td>').addClass('separator'));\n            middleRow.append($('<td>').addClass('separator').html(':'));\n            bottomRow.append($('<td>').addClass('separator'));\n          }\n\n          topRow.append($('<td>').append($('<a>').attr({\n            href: '#',\n            tabindex: '-1',\n            'title': this._options.tooltips.incrementMinute\n          }).addClass('btn').attr('data-action', 'incrementMinutes').append($('<span>').addClass(this._options.icons.up))));\n          middleRow.append($('<td>').append($('<span>').addClass('timepicker-minute').attr({\n            'data-time-component': 'minutes',\n            'title': this._options.tooltips.pickMinute\n          }).attr('data-action', 'showMinutes')));\n          bottomRow.append($('<td>').append($('<a>').attr({\n            href: '#',\n            tabindex: '-1',\n            'title': this._options.tooltips.decrementMinute\n          }).addClass('btn').attr('data-action', 'decrementMinutes').append($('<span>').addClass(this._options.icons.down))));\n        }\n\n        if (this._isEnabled('s')) {\n          if (this._isEnabled('m')) {\n            topRow.append($('<td>').addClass('separator'));\n            middleRow.append($('<td>').addClass('separator').html(':'));\n            bottomRow.append($('<td>').addClass('separator'));\n          }\n\n          topRow.append($('<td>').append($('<a>').attr({\n            href: '#',\n            tabindex: '-1',\n            'title': this._options.tooltips.incrementSecond\n          }).addClass('btn').attr('data-action', 'incrementSeconds').append($('<span>').addClass(this._options.icons.up))));\n          middleRow.append($('<td>').append($('<span>').addClass('timepicker-second').attr({\n            'data-time-component': 'seconds',\n            'title': this._options.tooltips.pickSecond\n          }).attr('data-action', 'showSeconds')));\n          bottomRow.append($('<td>').append($('<a>').attr({\n            href: '#',\n            tabindex: '-1',\n            'title': this._options.tooltips.decrementSecond\n          }).addClass('btn').attr('data-action', 'decrementSeconds').append($('<span>').addClass(this._options.icons.down))));\n        }\n\n        if (!this.use24Hours) {\n          topRow.append($('<td>').addClass('separator'));\n          middleRow.append($('<td>').append($('<button>').addClass('btn btn-primary').attr({\n            'data-action': 'togglePeriod',\n            tabindex: '-1',\n            'title': this._options.tooltips.togglePeriod\n          })));\n          bottomRow.append($('<td>').addClass('separator'));\n        }\n\n        return $('<div>').addClass('timepicker-picker').append($('<table>').addClass('table-condensed').append([topRow, middleRow, bottomRow]));\n      };\n\n      TempusDominusBootstrap4.prototype._getTimePickerTemplate = function _getTimePickerTemplate() {\n        var hoursView = $('<div>').addClass('timepicker-hours').append($('<table>').addClass('table-condensed')),\n            minutesView = $('<div>').addClass('timepicker-minutes').append($('<table>').addClass('table-condensed')),\n            secondsView = $('<div>').addClass('timepicker-seconds').append($('<table>').addClass('table-condensed')),\n            ret = [this._getTimePickerMainTemplate()];\n\n        if (this._isEnabled('h')) {\n          ret.push(hoursView);\n        }\n\n        if (this._isEnabled('m')) {\n          ret.push(minutesView);\n        }\n\n        if (this._isEnabled('s')) {\n          ret.push(secondsView);\n        }\n\n        return ret;\n      };\n\n      TempusDominusBootstrap4.prototype._getToolbar = function _getToolbar() {\n        var row = [];\n\n        if (this._options.buttons.showToday) {\n          row.push($('<td>').append($('<a>').attr({\n            href: '#',\n            tabindex: '-1',\n            'data-action': 'today',\n            'title': this._options.tooltips.today\n          }).append($('<span>').addClass(this._options.icons.today))));\n        }\n\n        if (!this._options.sideBySide && this._hasDate() && this._hasTime()) {\n          var title = void 0,\n              icon = void 0;\n\n          if (this._options.viewMode === 'times') {\n            title = this._options.tooltips.selectDate;\n            icon = this._options.icons.date;\n          } else {\n            title = this._options.tooltips.selectTime;\n            icon = this._options.icons.time;\n          }\n\n          row.push($('<td>').append($('<a>').attr({\n            href: '#',\n            tabindex: '-1',\n            'data-action': 'togglePicker',\n            'title': title\n          }).append($('<span>').addClass(icon))));\n        }\n\n        if (this._options.buttons.showClear) {\n          row.push($('<td>').append($('<a>').attr({\n            href: '#',\n            tabindex: '-1',\n            'data-action': 'clear',\n            'title': this._options.tooltips.clear\n          }).append($('<span>').addClass(this._options.icons.clear))));\n        }\n\n        if (this._options.buttons.showClose) {\n          row.push($('<td>').append($('<a>').attr({\n            href: '#',\n            tabindex: '-1',\n            'data-action': 'close',\n            'title': this._options.tooltips.close\n          }).append($('<span>').addClass(this._options.icons.close))));\n        }\n\n        return row.length === 0 ? '' : $('<table>').addClass('table-condensed').append($('<tbody>').append($('<tr>').append(row)));\n      };\n\n      TempusDominusBootstrap4.prototype._getTemplate = function _getTemplate() {\n        var template = $('<div>').addClass('bootstrap-datetimepicker-widget dropdown-menu'),\n            dateView = $('<div>').addClass('datepicker').append(this._getDatePickerTemplate()),\n            timeView = $('<div>').addClass('timepicker').append(this._getTimePickerTemplate()),\n            content = $('<ul>').addClass('list-unstyled'),\n            toolbar = $('<li>').addClass('picker-switch' + (this._options.collapse ? ' accordion-toggle' : '')).append(this._getToolbar());\n\n        if (this._options.inline) {\n          template.removeClass('dropdown-menu');\n        }\n\n        if (this.use24Hours) {\n          template.addClass('usetwentyfour');\n        }\n\n        if (this._isEnabled('s') && !this.use24Hours) {\n          template.addClass('wider');\n        }\n\n        if (this._options.sideBySide && this._hasDate() && this._hasTime()) {\n          template.addClass('timepicker-sbs');\n\n          if (this._options.toolbarPlacement === 'top') {\n            template.append(toolbar);\n          }\n\n          template.append($('<div>').addClass('row').append(dateView.addClass('col-md-6')).append(timeView.addClass('col-md-6')));\n\n          if (this._options.toolbarPlacement === 'bottom' || this._options.toolbarPlacement === 'default') {\n            template.append(toolbar);\n          }\n\n          return template;\n        }\n\n        if (this._options.toolbarPlacement === 'top') {\n          content.append(toolbar);\n        }\n\n        if (this._hasDate()) {\n          content.append($('<li>').addClass(this._options.collapse && this._hasTime() ? 'collapse' : '').addClass(this._options.collapse && this._hasTime() && this._options.viewMode === 'times' ? '' : 'show').append(dateView));\n        }\n\n        if (this._options.toolbarPlacement === 'default') {\n          content.append(toolbar);\n        }\n\n        if (this._hasTime()) {\n          content.append($('<li>').addClass(this._options.collapse && this._hasDate() ? 'collapse' : '').addClass(this._options.collapse && this._hasDate() && this._options.viewMode === 'times' ? 'show' : '').append(timeView));\n        }\n\n        if (this._options.toolbarPlacement === 'bottom') {\n          content.append(toolbar);\n        }\n\n        return template.append(content);\n      };\n\n      TempusDominusBootstrap4.prototype._place = function _place(e) {\n        var self = e && e.data && e.data.picker || this,\n            vertical = self._options.widgetPositioning.vertical,\n            horizontal = self._options.widgetPositioning.horizontal,\n            parent = void 0;\n        var position = (self.component && self.component.length ? self.component : self._element).position(),\n            offset = (self.component && self.component.length ? self.component : self._element).offset();\n\n        if (self._options.widgetParent) {\n          parent = self._options.widgetParent.append(self.widget);\n        } else if (self._element.is('input')) {\n          parent = self._element.after(self.widget).parent();\n        } else if (self._options.inline) {\n          parent = self._element.append(self.widget);\n          return;\n        } else {\n          parent = self._element;\n\n          self._element.children().first().after(self.widget);\n        } // Top and bottom logic\n\n\n        if (vertical === 'auto') {\n          //noinspection JSValidateTypes\n          if (offset.top + self.widget.height() * 1.5 >= $(window).height() + $(window).scrollTop() && self.widget.height() + self._element.outerHeight() < offset.top) {\n            vertical = 'top';\n          } else {\n            vertical = 'bottom';\n          }\n        } // Left and right logic\n\n\n        if (horizontal === 'auto') {\n          if (parent.width() < offset.left + self.widget.outerWidth() / 2 && offset.left + self.widget.outerWidth() > $(window).width()) {\n            horizontal = 'right';\n          } else {\n            horizontal = 'left';\n          }\n        }\n\n        if (vertical === 'top') {\n          self.widget.addClass('top').removeClass('bottom');\n        } else {\n          self.widget.addClass('bottom').removeClass('top');\n        }\n\n        if (horizontal === 'right') {\n          self.widget.addClass('float-right');\n        } else {\n          self.widget.removeClass('float-right');\n        } // find the first parent element that has a relative css positioning\n\n\n        if (parent.css('position') !== 'relative') {\n          parent = parent.parents().filter(function () {\n            return $(this).css('position') === 'relative';\n          }).first();\n        }\n\n        if (parent.length === 0) {\n          throw new Error('datetimepicker component should be placed within a relative positioned container');\n        }\n\n        self.widget.css({\n          top: vertical === 'top' ? 'auto' : position.top + self._element.outerHeight() + 'px',\n          bottom: vertical === 'top' ? parent.outerHeight() - (parent === self._element ? 0 : position.top) + 'px' : 'auto',\n          left: horizontal === 'left' ? (parent === self._element ? 0 : position.left) + 'px' : 'auto',\n          right: horizontal === 'left' ? 'auto' : parent.outerWidth() - self._element.outerWidth() - (parent === self._element ? 0 : position.left) + 'px'\n        });\n      };\n\n      TempusDominusBootstrap4.prototype._fillDow = function _fillDow() {\n        var row = $('<tr>'),\n            currentDate = this._viewDate.clone().startOf('w').startOf('d');\n\n        if (this._options.calendarWeeks === true) {\n          row.append($('<th>').addClass('cw').text('#'));\n        }\n\n        while (currentDate.isBefore(this._viewDate.clone().endOf('w'))) {\n          row.append($('<th>').addClass('dow').text(currentDate.format('dd')));\n          currentDate.add(1, 'd');\n        }\n\n        this.widget.find('.datepicker-days thead').append(row);\n      };\n\n      TempusDominusBootstrap4.prototype._fillMonths = function _fillMonths() {\n        var spans = [],\n            monthsShort = this._viewDate.clone().startOf('y').startOf('d');\n\n        while (monthsShort.isSame(this._viewDate, 'y')) {\n          spans.push($('<span>').attr('data-action', 'selectMonth').addClass('month').text(monthsShort.format('MMM')));\n          monthsShort.add(1, 'M');\n        }\n\n        this.widget.find('.datepicker-months td').empty().append(spans);\n      };\n\n      TempusDominusBootstrap4.prototype._updateMonths = function _updateMonths() {\n        var monthsView = this.widget.find('.datepicker-months'),\n            monthsViewHeader = monthsView.find('th'),\n            months = monthsView.find('tbody').find('span'),\n            self = this;\n        monthsViewHeader.eq(0).find('span').attr('title', this._options.tooltips.prevYear);\n        monthsViewHeader.eq(1).attr('title', this._options.tooltips.selectYear);\n        monthsViewHeader.eq(2).find('span').attr('title', this._options.tooltips.nextYear);\n        monthsView.find('.disabled').removeClass('disabled');\n\n        if (!this._isValid(this._viewDate.clone().subtract(1, 'y'), 'y')) {\n          monthsViewHeader.eq(0).addClass('disabled');\n        }\n\n        monthsViewHeader.eq(1).text(this._viewDate.year());\n\n        if (!this._isValid(this._viewDate.clone().add(1, 'y'), 'y')) {\n          monthsViewHeader.eq(2).addClass('disabled');\n        }\n\n        months.removeClass('active');\n\n        if (this._getLastPickedDate().isSame(this._viewDate, 'y') && !this.unset) {\n          months.eq(this._getLastPickedDate().month()).addClass('active');\n        }\n\n        months.each(function (index) {\n          if (!self._isValid(self._viewDate.clone().month(index), 'M')) {\n            $(this).addClass('disabled');\n          }\n        });\n      };\n\n      TempusDominusBootstrap4.prototype._getStartEndYear = function _getStartEndYear(factor, year) {\n        var step = factor / 10,\n            startYear = Math.floor(year / factor) * factor,\n            endYear = startYear + step * 9,\n            focusValue = Math.floor(year / step) * step;\n        return [startYear, endYear, focusValue];\n      };\n\n      TempusDominusBootstrap4.prototype._updateYears = function _updateYears() {\n        var yearsView = this.widget.find('.datepicker-years'),\n            yearsViewHeader = yearsView.find('th'),\n            yearCaps = this._getStartEndYear(10, this._viewDate.year()),\n            startYear = this._viewDate.clone().year(yearCaps[0]),\n            endYear = this._viewDate.clone().year(yearCaps[1]);\n\n        var html = '';\n        yearsViewHeader.eq(0).find('span').attr('title', this._options.tooltips.prevDecade);\n        yearsViewHeader.eq(1).attr('title', this._options.tooltips.selectDecade);\n        yearsViewHeader.eq(2).find('span').attr('title', this._options.tooltips.nextDecade);\n        yearsView.find('.disabled').removeClass('disabled');\n\n        if (this._options.minDate && this._options.minDate.isAfter(startYear, 'y')) {\n          yearsViewHeader.eq(0).addClass('disabled');\n        }\n\n        yearsViewHeader.eq(1).text(startYear.year() + '-' + endYear.year());\n\n        if (this._options.maxDate && this._options.maxDate.isBefore(endYear, 'y')) {\n          yearsViewHeader.eq(2).addClass('disabled');\n        }\n\n        html += '<span data-action=\"selectYear\" class=\"year old' + (!this._isValid(startYear, 'y') ? ' disabled' : '') + '\">' + (startYear.year() - 1) + '</span>';\n\n        while (!startYear.isAfter(endYear, 'y')) {\n          html += '<span data-action=\"selectYear\" class=\"year' + (startYear.isSame(this._getLastPickedDate(), 'y') && !this.unset ? ' active' : '') + (!this._isValid(startYear, 'y') ? ' disabled' : '') + '\">' + startYear.year() + '</span>';\n          startYear.add(1, 'y');\n        }\n\n        html += '<span data-action=\"selectYear\" class=\"year old' + (!this._isValid(startYear, 'y') ? ' disabled' : '') + '\">' + startYear.year() + '</span>';\n        yearsView.find('td').html(html);\n      };\n\n      TempusDominusBootstrap4.prototype._updateDecades = function _updateDecades() {\n        var decadesView = this.widget.find('.datepicker-decades'),\n            decadesViewHeader = decadesView.find('th'),\n            yearCaps = this._getStartEndYear(100, this._viewDate.year()),\n            startDecade = this._viewDate.clone().year(yearCaps[0]),\n            endDecade = this._viewDate.clone().year(yearCaps[1]);\n\n        var minDateDecade = false,\n            maxDateDecade = false,\n            endDecadeYear = void 0,\n            html = '';\n        decadesViewHeader.eq(0).find('span').attr('title', this._options.tooltips.prevCentury);\n        decadesViewHeader.eq(2).find('span').attr('title', this._options.tooltips.nextCentury);\n        decadesView.find('.disabled').removeClass('disabled');\n\n        if (startDecade.year() === 0 || this._options.minDate && this._options.minDate.isAfter(startDecade, 'y')) {\n          decadesViewHeader.eq(0).addClass('disabled');\n        }\n\n        decadesViewHeader.eq(1).text(startDecade.year() + '-' + endDecade.year());\n\n        if (this._options.maxDate && this._options.maxDate.isBefore(endDecade, 'y')) {\n          decadesViewHeader.eq(2).addClass('disabled');\n        }\n\n        if (startDecade.year() - 10 < 0) {\n          html += '<span>&nbsp;</span>';\n        } else {\n          html += '<span data-action=\"selectDecade\" class=\"decade old\" data-selection=\"' + (startDecade.year() + 6) + '\">' + (startDecade.year() - 10) + '</span>';\n        }\n\n        while (!startDecade.isAfter(endDecade, 'y')) {\n          endDecadeYear = startDecade.year() + 11;\n          minDateDecade = this._options.minDate && this._options.minDate.isAfter(startDecade, 'y') && this._options.minDate.year() <= endDecadeYear;\n          maxDateDecade = this._options.maxDate && this._options.maxDate.isAfter(startDecade, 'y') && this._options.maxDate.year() <= endDecadeYear;\n          html += '<span data-action=\"selectDecade\" class=\"decade' + (this._getLastPickedDate().isAfter(startDecade) && this._getLastPickedDate().year() <= endDecadeYear ? ' active' : '') + (!this._isValid(startDecade, 'y') && !minDateDecade && !maxDateDecade ? ' disabled' : '') + '\" data-selection=\"' + (startDecade.year() + 6) + '\">' + startDecade.year() + '</span>';\n          startDecade.add(10, 'y');\n        }\n\n        html += '<span data-action=\"selectDecade\" class=\"decade old\" data-selection=\"' + (startDecade.year() + 6) + '\">' + startDecade.year() + '</span>';\n        decadesView.find('td').html(html);\n      };\n\n      TempusDominusBootstrap4.prototype._fillDate = function _fillDate() {\n        var daysView = this.widget.find('.datepicker-days'),\n            daysViewHeader = daysView.find('th'),\n            html = [];\n        var currentDate = void 0,\n            row = void 0,\n            clsName = void 0,\n            i = void 0;\n\n        if (!this._hasDate()) {\n          return;\n        }\n\n        daysViewHeader.eq(0).find('span').attr('title', this._options.tooltips.prevMonth);\n        daysViewHeader.eq(1).attr('title', this._options.tooltips.selectMonth);\n        daysViewHeader.eq(2).find('span').attr('title', this._options.tooltips.nextMonth);\n        daysView.find('.disabled').removeClass('disabled');\n        daysViewHeader.eq(1).text(this._viewDate.format(this._options.dayViewHeaderFormat));\n\n        if (!this._isValid(this._viewDate.clone().subtract(1, 'M'), 'M')) {\n          daysViewHeader.eq(0).addClass('disabled');\n        }\n\n        if (!this._isValid(this._viewDate.clone().add(1, 'M'), 'M')) {\n          daysViewHeader.eq(2).addClass('disabled');\n        }\n\n        currentDate = this._viewDate.clone().startOf('M').startOf('w').startOf('d');\n\n        for (i = 0; i < 42; i++) {\n          //always display 42 days (should show 6 weeks)\n          if (currentDate.weekday() === 0) {\n            row = $('<tr>');\n\n            if (this._options.calendarWeeks) {\n              row.append('<td class=\"cw\">' + currentDate.week() + '</td>');\n            }\n\n            html.push(row);\n          }\n\n          clsName = '';\n\n          if (currentDate.isBefore(this._viewDate, 'M')) {\n            clsName += ' old';\n          }\n\n          if (currentDate.isAfter(this._viewDate, 'M')) {\n            clsName += ' new';\n          }\n\n          if (this._options.allowMultidate) {\n            var index = this._datesFormatted.indexOf(currentDate.format('YYYY-MM-DD'));\n\n            if (index !== -1) {\n              if (currentDate.isSame(this._datesFormatted[index], 'd') && !this.unset) {\n                clsName += ' active';\n              }\n            }\n          } else {\n            if (currentDate.isSame(this._getLastPickedDate(), 'd') && !this.unset) {\n              clsName += ' active';\n            }\n          }\n\n          if (!this._isValid(currentDate, 'd')) {\n            clsName += ' disabled';\n          }\n\n          if (currentDate.isSame(this.getMoment(), 'd')) {\n            clsName += ' today';\n          }\n\n          if (currentDate.day() === 0 || currentDate.day() === 6) {\n            clsName += ' weekend';\n          }\n\n          row.append('<td data-action=\"selectDay\" data-day=\"' + currentDate.format('L') + '\" class=\"day' + clsName + '\">' + currentDate.date() + '</td>');\n          currentDate.add(1, 'd');\n        }\n\n        daysView.find('tbody').empty().append(html);\n\n        this._updateMonths();\n\n        this._updateYears();\n\n        this._updateDecades();\n      };\n\n      TempusDominusBootstrap4.prototype._fillHours = function _fillHours() {\n        var table = this.widget.find('.timepicker-hours table'),\n            currentHour = this._viewDate.clone().startOf('d'),\n            html = [];\n\n        var row = $('<tr>');\n\n        if (this._viewDate.hour() > 11 && !this.use24Hours) {\n          currentHour.hour(12);\n        }\n\n        while (currentHour.isSame(this._viewDate, 'd') && (this.use24Hours || this._viewDate.hour() < 12 && currentHour.hour() < 12 || this._viewDate.hour() > 11)) {\n          if (currentHour.hour() % 4 === 0) {\n            row = $('<tr>');\n            html.push(row);\n          }\n\n          row.append('<td data-action=\"selectHour\" class=\"hour' + (!this._isValid(currentHour, 'h') ? ' disabled' : '') + '\">' + currentHour.format(this.use24Hours ? 'HH' : 'hh') + '</td>');\n          currentHour.add(1, 'h');\n        }\n\n        table.empty().append(html);\n      };\n\n      TempusDominusBootstrap4.prototype._fillMinutes = function _fillMinutes() {\n        var table = this.widget.find('.timepicker-minutes table'),\n            currentMinute = this._viewDate.clone().startOf('h'),\n            html = [],\n            step = this._options.stepping === 1 ? 5 : this._options.stepping;\n\n        var row = $('<tr>');\n\n        while (this._viewDate.isSame(currentMinute, 'h')) {\n          if (currentMinute.minute() % (step * 4) === 0) {\n            row = $('<tr>');\n            html.push(row);\n          }\n\n          row.append('<td data-action=\"selectMinute\" class=\"minute' + (!this._isValid(currentMinute, 'm') ? ' disabled' : '') + '\">' + currentMinute.format('mm') + '</td>');\n          currentMinute.add(step, 'm');\n        }\n\n        table.empty().append(html);\n      };\n\n      TempusDominusBootstrap4.prototype._fillSeconds = function _fillSeconds() {\n        var table = this.widget.find('.timepicker-seconds table'),\n            currentSecond = this._viewDate.clone().startOf('m'),\n            html = [];\n\n        var row = $('<tr>');\n\n        while (this._viewDate.isSame(currentSecond, 'm')) {\n          if (currentSecond.second() % 20 === 0) {\n            row = $('<tr>');\n            html.push(row);\n          }\n\n          row.append('<td data-action=\"selectSecond\" class=\"second' + (!this._isValid(currentSecond, 's') ? ' disabled' : '') + '\">' + currentSecond.format('ss') + '</td>');\n          currentSecond.add(5, 's');\n        }\n\n        table.empty().append(html);\n      };\n\n      TempusDominusBootstrap4.prototype._fillTime = function _fillTime() {\n        var toggle = void 0,\n            newDate = void 0;\n        var timeComponents = this.widget.find('.timepicker span[data-time-component]');\n\n        if (!this.use24Hours) {\n          toggle = this.widget.find('.timepicker [data-action=togglePeriod]');\n          newDate = this._getLastPickedDate().clone().add(this._getLastPickedDate().hours() >= 12 ? -12 : 12, 'h');\n          toggle.text(this._getLastPickedDate().format('A'));\n\n          if (this._isValid(newDate, 'h')) {\n            toggle.removeClass('disabled');\n          } else {\n            toggle.addClass('disabled');\n          }\n        }\n\n        timeComponents.filter('[data-time-component=hours]').text(this._getLastPickedDate().format('' + (this.use24Hours ? 'HH' : 'hh')));\n        timeComponents.filter('[data-time-component=minutes]').text(this._getLastPickedDate().format('mm'));\n        timeComponents.filter('[data-time-component=seconds]').text(this._getLastPickedDate().format('ss'));\n\n        this._fillHours();\n\n        this._fillMinutes();\n\n        this._fillSeconds();\n      };\n\n      TempusDominusBootstrap4.prototype._doAction = function _doAction(e, action) {\n        var lastPicked = this._getLastPickedDate();\n\n        if ($(e.currentTarget).is('.disabled')) {\n          return false;\n        }\n\n        action = action || $(e.currentTarget).data('action');\n\n        switch (action) {\n          case 'next':\n            {\n              var navFnc = DateTimePicker.DatePickerModes[this.currentViewMode].NAV_FUNCTION;\n\n              this._viewDate.add(DateTimePicker.DatePickerModes[this.currentViewMode].NAV_STEP, navFnc);\n\n              this._fillDate();\n\n              this._viewUpdate(navFnc);\n\n              break;\n            }\n\n          case 'previous':\n            {\n              var _navFnc = DateTimePicker.DatePickerModes[this.currentViewMode].NAV_FUNCTION;\n\n              this._viewDate.subtract(DateTimePicker.DatePickerModes[this.currentViewMode].NAV_STEP, _navFnc);\n\n              this._fillDate();\n\n              this._viewUpdate(_navFnc);\n\n              break;\n            }\n\n          case 'pickerSwitch':\n            this._showMode(1);\n\n            break;\n\n          case 'selectMonth':\n            {\n              var month = $(e.target).closest('tbody').find('span').index($(e.target));\n\n              this._viewDate.month(month);\n\n              if (this.currentViewMode === this.MinViewModeNumber) {\n                this._setValue(lastPicked.clone().year(this._viewDate.year()).month(this._viewDate.month()), this._getLastPickedDateIndex());\n\n                if (!this._options.inline) {\n                  this.hide();\n                }\n              } else {\n                this._showMode(-1);\n\n                this._fillDate();\n              }\n\n              this._viewUpdate('M');\n\n              break;\n            }\n\n          case 'selectYear':\n            {\n              var year = parseInt($(e.target).text(), 10) || 0;\n\n              this._viewDate.year(year);\n\n              if (this.currentViewMode === this.MinViewModeNumber) {\n                this._setValue(lastPicked.clone().year(this._viewDate.year()), this._getLastPickedDateIndex());\n\n                if (!this._options.inline) {\n                  this.hide();\n                }\n              } else {\n                this._showMode(-1);\n\n                this._fillDate();\n              }\n\n              this._viewUpdate('YYYY');\n\n              break;\n            }\n\n          case 'selectDecade':\n            {\n              var _year = parseInt($(e.target).data('selection'), 10) || 0;\n\n              this._viewDate.year(_year);\n\n              if (this.currentViewMode === this.MinViewModeNumber) {\n                this._setValue(lastPicked.clone().year(this._viewDate.year()), this._getLastPickedDateIndex());\n\n                if (!this._options.inline) {\n                  this.hide();\n                }\n              } else {\n                this._showMode(-1);\n\n                this._fillDate();\n              }\n\n              this._viewUpdate('YYYY');\n\n              break;\n            }\n\n          case 'selectDay':\n            {\n              var day = this._viewDate.clone();\n\n              if ($(e.target).is('.old')) {\n                day.subtract(1, 'M');\n              }\n\n              if ($(e.target).is('.new')) {\n                day.add(1, 'M');\n              }\n\n              var selectDate = day.date(parseInt($(e.target).text(), 10)),\n                  index = 0;\n\n              if (this._options.allowMultidate) {\n                index = this._datesFormatted.indexOf(selectDate.format('YYYY-MM-DD'));\n\n                if (index !== -1) {\n                  this._setValue(null, index); //deselect multidate\n\n                } else {\n                  this._setValue(selectDate, this._getLastPickedDateIndex() + 1);\n                }\n              } else {\n                this._setValue(selectDate, this._getLastPickedDateIndex());\n              }\n\n              if (!this._hasTime() && !this._options.keepOpen && !this._options.inline && !this._options.allowMultidate) {\n                this.hide();\n              }\n\n              break;\n            }\n\n          case 'incrementHours':\n            {\n              var newDate = lastPicked.clone().add(1, 'h');\n\n              if (this._isValid(newDate, 'h')) {\n                this._setValue(newDate, this._getLastPickedDateIndex());\n              }\n\n              break;\n            }\n\n          case 'incrementMinutes':\n            {\n              var _newDate = lastPicked.clone().add(this._options.stepping, 'm');\n\n              if (this._isValid(_newDate, 'm')) {\n                this._setValue(_newDate, this._getLastPickedDateIndex());\n              }\n\n              break;\n            }\n\n          case 'incrementSeconds':\n            {\n              var _newDate2 = lastPicked.clone().add(1, 's');\n\n              if (this._isValid(_newDate2, 's')) {\n                this._setValue(_newDate2, this._getLastPickedDateIndex());\n              }\n\n              break;\n            }\n\n          case 'decrementHours':\n            {\n              var _newDate3 = lastPicked.clone().subtract(1, 'h');\n\n              if (this._isValid(_newDate3, 'h')) {\n                this._setValue(_newDate3, this._getLastPickedDateIndex());\n              }\n\n              break;\n            }\n\n          case 'decrementMinutes':\n            {\n              var _newDate4 = lastPicked.clone().subtract(this._options.stepping, 'm');\n\n              if (this._isValid(_newDate4, 'm')) {\n                this._setValue(_newDate4, this._getLastPickedDateIndex());\n              }\n\n              break;\n            }\n\n          case 'decrementSeconds':\n            {\n              var _newDate5 = lastPicked.clone().subtract(1, 's');\n\n              if (this._isValid(_newDate5, 's')) {\n                this._setValue(_newDate5, this._getLastPickedDateIndex());\n              }\n\n              break;\n            }\n\n          case 'togglePeriod':\n            {\n              this._setValue(lastPicked.clone().add(lastPicked.hours() >= 12 ? -12 : 12, 'h'), this._getLastPickedDateIndex());\n\n              break;\n            }\n\n          case 'togglePicker':\n            {\n              var $this = $(e.target),\n                  $link = $this.closest('a'),\n                  $parent = $this.closest('ul'),\n                  expanded = $parent.find('.show'),\n                  closed = $parent.find('.collapse:not(.show)'),\n                  $span = $this.is('span') ? $this : $this.find('span');\n              var collapseData = void 0;\n\n              if (expanded && expanded.length) {\n                collapseData = expanded.data('collapse');\n\n                if (collapseData && collapseData.transitioning) {\n                  return true;\n                }\n\n                if (expanded.collapse) {\n                  // if collapse plugin is available through bootstrap.js then use it\n                  expanded.collapse('hide');\n                  closed.collapse('show');\n                } else {\n                  // otherwise just toggle in class on the two views\n                  expanded.removeClass('show');\n                  closed.addClass('show');\n                }\n\n                $span.toggleClass(this._options.icons.time + ' ' + this._options.icons.date);\n\n                if ($span.hasClass(this._options.icons.date)) {\n                  $link.attr('title', this._options.tooltips.selectDate);\n                } else {\n                  $link.attr('title', this._options.tooltips.selectTime);\n                }\n              }\n            }\n            break;\n\n          case 'showPicker':\n            this.widget.find('.timepicker > div:not(.timepicker-picker)').hide();\n            this.widget.find('.timepicker .timepicker-picker').show();\n            break;\n\n          case 'showHours':\n            this.widget.find('.timepicker .timepicker-picker').hide();\n            this.widget.find('.timepicker .timepicker-hours').show();\n            break;\n\n          case 'showMinutes':\n            this.widget.find('.timepicker .timepicker-picker').hide();\n            this.widget.find('.timepicker .timepicker-minutes').show();\n            break;\n\n          case 'showSeconds':\n            this.widget.find('.timepicker .timepicker-picker').hide();\n            this.widget.find('.timepicker .timepicker-seconds').show();\n            break;\n\n          case 'selectHour':\n            {\n              var hour = parseInt($(e.target).text(), 10);\n\n              if (!this.use24Hours) {\n                if (lastPicked.hours() >= 12) {\n                  if (hour !== 12) {\n                    hour += 12;\n                  }\n                } else {\n                  if (hour === 12) {\n                    hour = 0;\n                  }\n                }\n              }\n\n              this._setValue(lastPicked.clone().hours(hour), this._getLastPickedDateIndex());\n\n              if (!this._isEnabled('a') && !this._isEnabled('m') && !this._options.keepOpen && !this._options.inline) {\n                this.hide();\n              } else {\n                this._doAction(e, 'showPicker');\n              }\n\n              break;\n            }\n\n          case 'selectMinute':\n            this._setValue(lastPicked.clone().minutes(parseInt($(e.target).text(), 10)), this._getLastPickedDateIndex());\n\n            if (!this._isEnabled('a') && !this._isEnabled('s') && !this._options.keepOpen && !this._options.inline) {\n              this.hide();\n            } else {\n              this._doAction(e, 'showPicker');\n            }\n\n            break;\n\n          case 'selectSecond':\n            this._setValue(lastPicked.clone().seconds(parseInt($(e.target).text(), 10)), this._getLastPickedDateIndex());\n\n            if (!this._isEnabled('a') && !this._options.keepOpen && !this._options.inline) {\n              this.hide();\n            } else {\n              this._doAction(e, 'showPicker');\n            }\n\n            break;\n\n          case 'clear':\n            this.clear();\n            break;\n\n          case 'close':\n            this.hide();\n            break;\n\n          case 'today':\n            {\n              var todaysDate = this.getMoment();\n\n              if (this._isValid(todaysDate, 'd')) {\n                this._setValue(todaysDate, this._getLastPickedDateIndex());\n              }\n\n              break;\n            }\n        }\n\n        return false;\n      }; //public\n\n\n      TempusDominusBootstrap4.prototype.hide = function hide() {\n        var transitioning = false;\n\n        if (!this.widget) {\n          return;\n        } // Ignore event if in the middle of a picker transition\n\n\n        this.widget.find('.collapse').each(function () {\n          var collapseData = $(this).data('collapse');\n\n          if (collapseData && collapseData.transitioning) {\n            transitioning = true;\n            return false;\n          }\n\n          return true;\n        });\n\n        if (transitioning) {\n          return;\n        }\n\n        if (this.component && this.component.hasClass('btn')) {\n          this.component.toggleClass('active');\n        }\n\n        this.widget.hide();\n        $(window).off('resize', this._place());\n        this.widget.off('click', '[data-action]');\n        this.widget.off('mousedown', false);\n        this.widget.remove();\n        this.widget = false;\n\n        this._notifyEvent({\n          type: DateTimePicker.Event.HIDE,\n          date: this._getLastPickedDate().clone()\n        });\n\n        if (this.input !== undefined) {\n          this.input.blur();\n        }\n\n        this._viewDate = this._getLastPickedDate().clone();\n      };\n\n      TempusDominusBootstrap4.prototype.show = function show() {\n        var currentMoment = void 0;\n        var useCurrentGranularity = {\n          'year': function year(m) {\n            return m.month(0).date(1).hours(0).seconds(0).minutes(0);\n          },\n          'month': function month(m) {\n            return m.date(1).hours(0).seconds(0).minutes(0);\n          },\n          'day': function day(m) {\n            return m.hours(0).seconds(0).minutes(0);\n          },\n          'hour': function hour(m) {\n            return m.seconds(0).minutes(0);\n          },\n          'minute': function minute(m) {\n            return m.seconds(0);\n          }\n        };\n\n        if (this.input !== undefined) {\n          if (this.input.prop('disabled') || !this._options.ignoreReadonly && this.input.prop('readonly') || this.widget) {\n            return;\n          }\n\n          if (this.input.val() !== undefined && this.input.val().trim().length !== 0) {\n            this._setValue(this._parseInputDate(this.input.val().trim()), 0);\n          } else if (this.unset && this._options.useCurrent) {\n            currentMoment = this.getMoment();\n\n            if (typeof this._options.useCurrent === 'string') {\n              currentMoment = useCurrentGranularity[this._options.useCurrent](currentMoment);\n            }\n\n            this._setValue(currentMoment, 0);\n          }\n        } else if (this.unset && this._options.useCurrent) {\n          currentMoment = this.getMoment();\n\n          if (typeof this._options.useCurrent === 'string') {\n            currentMoment = useCurrentGranularity[this._options.useCurrent](currentMoment);\n          }\n\n          this._setValue(currentMoment, 0);\n        }\n\n        this.widget = this._getTemplate();\n\n        this._fillDow();\n\n        this._fillMonths();\n\n        this.widget.find('.timepicker-hours').hide();\n        this.widget.find('.timepicker-minutes').hide();\n        this.widget.find('.timepicker-seconds').hide();\n\n        this._update();\n\n        this._showMode();\n\n        $(window).on('resize', {\n          picker: this\n        }, this._place);\n        this.widget.on('click', '[data-action]', $.proxy(this._doAction, this)); // this handles clicks on the widget\n\n        this.widget.on('mousedown', false);\n\n        if (this.component && this.component.hasClass('btn')) {\n          this.component.toggleClass('active');\n        }\n\n        this._place();\n\n        this.widget.show();\n\n        if (this.input !== undefined && this._options.focusOnShow && !this.input.is(':focus')) {\n          this.input.focus();\n        }\n\n        this._notifyEvent({\n          type: DateTimePicker.Event.SHOW\n        });\n      };\n\n      TempusDominusBootstrap4.prototype.destroy = function destroy() {\n        this.hide(); //todo doc off?\n\n        this._element.removeData(DateTimePicker.DATA_KEY);\n\n        this._element.removeData('date');\n      };\n\n      TempusDominusBootstrap4.prototype.disable = function disable() {\n        this.hide();\n\n        if (this.component && this.component.hasClass('btn')) {\n          this.component.addClass('disabled');\n        }\n\n        if (this.input !== undefined) {\n          this.input.prop('disabled', true); //todo disable this/comp if input is null\n        }\n      };\n\n      TempusDominusBootstrap4.prototype.enable = function enable() {\n        if (this.component && this.component.hasClass('btn')) {\n          this.component.removeClass('disabled');\n        }\n\n        if (this.input !== undefined) {\n          this.input.prop('disabled', false); //todo enable comp/this if input is null\n        }\n      };\n\n      TempusDominusBootstrap4.prototype.toolbarPlacement = function toolbarPlacement(_toolbarPlacement) {\n        if (arguments.length === 0) {\n          return this._options.toolbarPlacement;\n        }\n\n        if (typeof _toolbarPlacement !== 'string') {\n          throw new TypeError('toolbarPlacement() expects a string parameter');\n        }\n\n        if (toolbarPlacements.indexOf(_toolbarPlacement) === -1) {\n          throw new TypeError('toolbarPlacement() parameter must be one of (' + toolbarPlacements.join(', ') + ') value');\n        }\n\n        this._options.toolbarPlacement = _toolbarPlacement;\n\n        if (this.widget) {\n          this.hide();\n          this.show();\n        }\n      };\n\n      TempusDominusBootstrap4.prototype.widgetPositioning = function widgetPositioning(_widgetPositioning) {\n        if (arguments.length === 0) {\n          return $.extend({}, this._options.widgetPositioning);\n        }\n\n        if ({}.toString.call(_widgetPositioning) !== '[object Object]') {\n          throw new TypeError('widgetPositioning() expects an object variable');\n        }\n\n        if (_widgetPositioning.horizontal) {\n          if (typeof _widgetPositioning.horizontal !== 'string') {\n            throw new TypeError('widgetPositioning() horizontal variable must be a string');\n          }\n\n          _widgetPositioning.horizontal = _widgetPositioning.horizontal.toLowerCase();\n\n          if (horizontalModes.indexOf(_widgetPositioning.horizontal) === -1) {\n            throw new TypeError('widgetPositioning() expects horizontal parameter to be one of (' + horizontalModes.join(', ') + ')');\n          }\n\n          this._options.widgetPositioning.horizontal = _widgetPositioning.horizontal;\n        }\n\n        if (_widgetPositioning.vertical) {\n          if (typeof _widgetPositioning.vertical !== 'string') {\n            throw new TypeError('widgetPositioning() vertical variable must be a string');\n          }\n\n          _widgetPositioning.vertical = _widgetPositioning.vertical.toLowerCase();\n\n          if (verticalModes.indexOf(_widgetPositioning.vertical) === -1) {\n            throw new TypeError('widgetPositioning() expects vertical parameter to be one of (' + verticalModes.join(', ') + ')');\n          }\n\n          this._options.widgetPositioning.vertical = _widgetPositioning.vertical;\n        }\n\n        this._update();\n      };\n\n      TempusDominusBootstrap4.prototype.widgetParent = function widgetParent(_widgetParent) {\n        if (arguments.length === 0) {\n          return this._options.widgetParent;\n        }\n\n        if (typeof _widgetParent === 'string') {\n          _widgetParent = $(_widgetParent);\n        }\n\n        if (_widgetParent !== null && typeof _widgetParent !== 'string' && !(_widgetParent instanceof $)) {\n          throw new TypeError('widgetParent() expects a string or a jQuery object parameter');\n        }\n\n        this._options.widgetParent = _widgetParent;\n\n        if (this.widget) {\n          this.hide();\n          this.show();\n        }\n      }; //static\n\n\n      TempusDominusBootstrap4._jQueryHandleThis = function _jQueryHandleThis(me, option, argument) {\n        var data = $(me).data(DateTimePicker.DATA_KEY);\n\n        if ((typeof option === 'undefined' ? 'undefined' : _typeof(option)) === 'object') {\n          $.extend({}, DateTimePicker.Default, option);\n        }\n\n        if (!data) {\n          data = new TempusDominusBootstrap4($(me), option);\n          $(me).data(DateTimePicker.DATA_KEY, data);\n        }\n\n        if (typeof option === 'string') {\n          if (data[option] === undefined) {\n            throw new Error('No method named \"' + option + '\"');\n          }\n\n          if (argument === undefined) {\n            return data[option]();\n          } else {\n            return data[option](argument);\n          }\n        }\n      };\n\n      TempusDominusBootstrap4._jQueryInterface = function _jQueryInterface(option, argument) {\n        if (this.length === 1) {\n          return TempusDominusBootstrap4._jQueryHandleThis(this[0], option, argument);\n        }\n\n        return this.each(function () {\n          TempusDominusBootstrap4._jQueryHandleThis(this, option, argument);\n        });\n      };\n\n      return TempusDominusBootstrap4;\n    }(DateTimePicker);\n    /**\r\n    * ------------------------------------------------------------------------\r\n    * jQuery\r\n    * ------------------------------------------------------------------------\r\n    */\n\n\n    $(document).on(DateTimePicker.Event.CLICK_DATA_API, DateTimePicker.Selector.DATA_TOGGLE, function () {\n      var $target = getSelectorFromElement($(this));\n\n      if ($target.length === 0) {\n        return;\n      }\n\n      TempusDominusBootstrap4._jQueryInterface.call($target, 'toggle');\n    }).on(DateTimePicker.Event.CHANGE, '.' + DateTimePicker.ClassName.INPUT, function (event) {\n      var $target = getSelectorFromElement($(this));\n\n      if ($target.length === 0) {\n        return;\n      }\n\n      TempusDominusBootstrap4._jQueryInterface.call($target, '_change', event);\n    }).on(DateTimePicker.Event.BLUR, '.' + DateTimePicker.ClassName.INPUT, function (event) {\n      var $target = getSelectorFromElement($(this)),\n          config = $target.data(DateTimePicker.DATA_KEY);\n\n      if ($target.length === 0) {\n        return;\n      }\n\n      if (config._options.debug || window.debug) {\n        return;\n      }\n\n      TempusDominusBootstrap4._jQueryInterface.call($target, 'hide', event);\n    }).on(DateTimePicker.Event.KEYDOWN, '.' + DateTimePicker.ClassName.INPUT, function (event) {\n      var $target = getSelectorFromElement($(this));\n\n      if ($target.length === 0) {\n        return;\n      }\n\n      TempusDominusBootstrap4._jQueryInterface.call($target, '_keydown', event);\n    }).on(DateTimePicker.Event.KEYUP, '.' + DateTimePicker.ClassName.INPUT, function (event) {\n      var $target = getSelectorFromElement($(this));\n\n      if ($target.length === 0) {\n        return;\n      }\n\n      TempusDominusBootstrap4._jQueryInterface.call($target, '_keyup', event);\n    }).on(DateTimePicker.Event.FOCUS, '.' + DateTimePicker.ClassName.INPUT, function (event) {\n      var $target = getSelectorFromElement($(this)),\n          config = $target.data(DateTimePicker.DATA_KEY);\n\n      if ($target.length === 0) {\n        return;\n      }\n\n      if (!config._options.allowInputToggle) {\n        return;\n      }\n\n      TempusDominusBootstrap4._jQueryInterface.call($target, 'show', event);\n    });\n    $.fn[DateTimePicker.NAME] = TempusDominusBootstrap4._jQueryInterface;\n    $.fn[DateTimePicker.NAME].Constructor = TempusDominusBootstrap4;\n\n    $.fn[DateTimePicker.NAME].noConflict = function () {\n      $.fn[DateTimePicker.NAME] = JQUERY_NO_CONFLICT;\n      return TempusDominusBootstrap4._jQueryInterface;\n    };\n\n    return TempusDominusBootstrap4;\n  }(jQuery);\n}();","map":null,"metadata":{},"sourceType":"module"}