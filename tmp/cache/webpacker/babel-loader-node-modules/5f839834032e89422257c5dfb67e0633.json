{"ast":null,"code":"/*!\n * jQuery UI Effects Bounce 1.12.1\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n//>>label: Bounce Effect\n//>>group: Effects\n//>>description: Bounces an element horizontally or vertically n times.\n//>>docs: http://api.jqueryui.com/bounce-effect/\n//>>demos: http://jqueryui.com/effect/\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\", \"../version\", \"../effect\"], factory);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  return $.effects.define(\"bounce\", function (options, done) {\n    var upAnim,\n        downAnim,\n        refValue,\n        element = $(this),\n        // Defaults:\n    mode = options.mode,\n        hide = mode === \"hide\",\n        show = mode === \"show\",\n        direction = options.direction || \"up\",\n        distance = options.distance,\n        times = options.times || 5,\n        // Number of internal animations\n    anims = times * 2 + (show || hide ? 1 : 0),\n        speed = options.duration / anims,\n        easing = options.easing,\n        // Utility:\n    ref = direction === \"up\" || direction === \"down\" ? \"top\" : \"left\",\n        motion = direction === \"up\" || direction === \"left\",\n        i = 0,\n        queuelen = element.queue().length;\n    $.effects.createPlaceholder(element);\n    refValue = element.css(ref); // Default distance for the BIGGEST bounce is the outer Distance / 3\n\n    if (!distance) {\n      distance = element[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"]() / 3;\n    }\n\n    if (show) {\n      downAnim = {\n        opacity: 1\n      };\n      downAnim[ref] = refValue; // If we are showing, force opacity 0 and set the initial position\n      // then do the \"first\" animation\n\n      element.css(\"opacity\", 0).css(ref, motion ? -distance * 2 : distance * 2).animate(downAnim, speed, easing);\n    } // Start at the smallest distance if we are hiding\n\n\n    if (hide) {\n      distance = distance / Math.pow(2, times - 1);\n    }\n\n    downAnim = {};\n    downAnim[ref] = refValue; // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here\n\n    for (; i < times; i++) {\n      upAnim = {};\n      upAnim[ref] = (motion ? \"-=\" : \"+=\") + distance;\n      element.animate(upAnim, speed, easing).animate(downAnim, speed, easing);\n      distance = hide ? distance * 2 : distance / 2;\n    } // Last Bounce when Hiding\n\n\n    if (hide) {\n      upAnim = {\n        opacity: 0\n      };\n      upAnim[ref] = (motion ? \"-=\" : \"+=\") + distance;\n      element.animate(upAnim, speed, easing);\n    }\n\n    element.queue(done);\n    $.effects.unshift(element, queuelen, anims + 1);\n  });\n});","map":null,"metadata":{},"sourceType":"module"}