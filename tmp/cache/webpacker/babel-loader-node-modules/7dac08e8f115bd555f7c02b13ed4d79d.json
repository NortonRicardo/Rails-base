{"ast":null,"code":"/*!\n * jQuery UI Selectmenu 1.12.1\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n//>>label: Selectmenu\n//>>group: Widgets\n// jscs:disable maximumLineLength\n//>>description: Duplicates and extends the functionality of a native HTML select element, allowing it to be customizable in behavior and appearance far beyond the limitations of a native select.\n// jscs:enable maximumLineLength\n//>>docs: http://api.jqueryui.com/selectmenu/\n//>>demos: http://jqueryui.com/selectmenu/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/selectmenu.css, ../../themes/base/button.css\n//>>css.theme: ../../themes/base/theme.css\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\", \"./menu\", \"../escape-selector\", \"../form-reset-mixin\", \"../keycode\", \"../labels\", \"../position\", \"../unique-id\", \"../version\", \"../widget\"], factory);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  return $.widget(\"ui.selectmenu\", [$.ui.formResetMixin, {\n    version: \"1.12.1\",\n    defaultElement: \"<select>\",\n    options: {\n      appendTo: null,\n      classes: {\n        \"ui-selectmenu-button-open\": \"ui-corner-top\",\n        \"ui-selectmenu-button-closed\": \"ui-corner-all\"\n      },\n      disabled: null,\n      icons: {\n        button: \"ui-icon-triangle-1-s\"\n      },\n      position: {\n        my: \"left top\",\n        at: \"left bottom\",\n        collision: \"none\"\n      },\n      width: false,\n      // Callbacks\n      change: null,\n      close: null,\n      focus: null,\n      open: null,\n      select: null\n    },\n    _create: function _create() {\n      var selectmenuId = this.element.uniqueId().attr(\"id\");\n      this.ids = {\n        element: selectmenuId,\n        button: selectmenuId + \"-button\",\n        menu: selectmenuId + \"-menu\"\n      };\n\n      this._drawButton();\n\n      this._drawMenu();\n\n      this._bindFormResetHandler();\n\n      this._rendered = false;\n      this.menuItems = $();\n    },\n    _drawButton: function _drawButton() {\n      var icon,\n          that = this,\n          item = this._parseOption(this.element.find(\"option:selected\"), this.element[0].selectedIndex); // Associate existing label with the new button\n\n\n      this.labels = this.element.labels().attr(\"for\", this.ids.button);\n\n      this._on(this.labels, {\n        click: function click(event) {\n          this.button.focus();\n          event.preventDefault();\n        }\n      }); // Hide original select element\n\n\n      this.element.hide(); // Create button\n\n      this.button = $(\"<span>\", {\n        tabindex: this.options.disabled ? -1 : 0,\n        id: this.ids.button,\n        role: \"combobox\",\n        \"aria-expanded\": \"false\",\n        \"aria-autocomplete\": \"list\",\n        \"aria-owns\": this.ids.menu,\n        \"aria-haspopup\": \"true\",\n        title: this.element.attr(\"title\")\n      }).insertAfter(this.element);\n\n      this._addClass(this.button, \"ui-selectmenu-button ui-selectmenu-button-closed\", \"ui-button ui-widget\");\n\n      icon = $(\"<span>\").appendTo(this.button);\n\n      this._addClass(icon, \"ui-selectmenu-icon\", \"ui-icon \" + this.options.icons.button);\n\n      this.buttonItem = this._renderButtonItem(item).appendTo(this.button);\n\n      if (this.options.width !== false) {\n        this._resizeButton();\n      }\n\n      this._on(this.button, this._buttonEvents);\n\n      this.button.one(\"focusin\", function () {\n        // Delay rendering the menu items until the button receives focus.\n        // The menu may have already been rendered via a programmatic open.\n        if (!that._rendered) {\n          that._refreshMenu();\n        }\n      });\n    },\n    _drawMenu: function _drawMenu() {\n      var that = this; // Create menu\n\n      this.menu = $(\"<ul>\", {\n        \"aria-hidden\": \"true\",\n        \"aria-labelledby\": this.ids.button,\n        id: this.ids.menu\n      }); // Wrap menu\n\n      this.menuWrap = $(\"<div>\").append(this.menu);\n\n      this._addClass(this.menuWrap, \"ui-selectmenu-menu\", \"ui-front\");\n\n      this.menuWrap.appendTo(this._appendTo()); // Initialize menu widget\n\n      this.menuInstance = this.menu.menu({\n        classes: {\n          \"ui-menu\": \"ui-corner-bottom\"\n        },\n        role: \"listbox\",\n        select: function select(event, ui) {\n          event.preventDefault(); // Support: IE8\n          // If the item was selected via a click, the text selection\n          // will be destroyed in IE\n\n          that._setSelection();\n\n          that._select(ui.item.data(\"ui-selectmenu-item\"), event);\n        },\n        focus: function focus(event, ui) {\n          var item = ui.item.data(\"ui-selectmenu-item\"); // Prevent inital focus from firing and check if its a newly focused item\n\n          if (that.focusIndex != null && item.index !== that.focusIndex) {\n            that._trigger(\"focus\", event, {\n              item: item\n            });\n\n            if (!that.isOpen) {\n              that._select(item, event);\n            }\n          }\n\n          that.focusIndex = item.index;\n          that.button.attr(\"aria-activedescendant\", that.menuItems.eq(item.index).attr(\"id\"));\n        }\n      }).menu(\"instance\"); // Don't close the menu on mouseleave\n\n      this.menuInstance._off(this.menu, \"mouseleave\"); // Cancel the menu's collapseAll on document click\n\n\n      this.menuInstance._closeOnDocumentClick = function () {\n        return false;\n      }; // Selects often contain empty items, but never contain dividers\n\n\n      this.menuInstance._isDivider = function () {\n        return false;\n      };\n    },\n    refresh: function refresh() {\n      this._refreshMenu();\n\n      this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem( // Fall back to an empty object in case there are no options\n      this._getSelectedItem().data(\"ui-selectmenu-item\") || {}));\n\n      if (this.options.width === null) {\n        this._resizeButton();\n      }\n    },\n    _refreshMenu: function _refreshMenu() {\n      var item,\n          options = this.element.find(\"option\");\n      this.menu.empty();\n\n      this._parseOptions(options);\n\n      this._renderMenu(this.menu, this.items);\n\n      this.menuInstance.refresh();\n      this.menuItems = this.menu.find(\"li\").not(\".ui-selectmenu-optgroup\").find(\".ui-menu-item-wrapper\");\n      this._rendered = true;\n\n      if (!options.length) {\n        return;\n      }\n\n      item = this._getSelectedItem(); // Update the menu to have the correct item focused\n\n      this.menuInstance.focus(null, item);\n\n      this._setAria(item.data(\"ui-selectmenu-item\")); // Set disabled state\n\n\n      this._setOption(\"disabled\", this.element.prop(\"disabled\"));\n    },\n    open: function open(event) {\n      if (this.options.disabled) {\n        return;\n      } // If this is the first time the menu is being opened, render the items\n\n\n      if (!this._rendered) {\n        this._refreshMenu();\n      } else {\n        // Menu clears focus on close, reset focus to selected item\n        this._removeClass(this.menu.find(\".ui-state-active\"), null, \"ui-state-active\");\n\n        this.menuInstance.focus(null, this._getSelectedItem());\n      } // If there are no options, don't open the menu\n\n\n      if (!this.menuItems.length) {\n        return;\n      }\n\n      this.isOpen = true;\n\n      this._toggleAttr();\n\n      this._resizeMenu();\n\n      this._position();\n\n      this._on(this.document, this._documentClick);\n\n      this._trigger(\"open\", event);\n    },\n    _position: function _position() {\n      this.menuWrap.position($.extend({\n        of: this.button\n      }, this.options.position));\n    },\n    close: function close(event) {\n      if (!this.isOpen) {\n        return;\n      }\n\n      this.isOpen = false;\n\n      this._toggleAttr();\n\n      this.range = null;\n\n      this._off(this.document);\n\n      this._trigger(\"close\", event);\n    },\n    widget: function widget() {\n      return this.button;\n    },\n    menuWidget: function menuWidget() {\n      return this.menu;\n    },\n    _renderButtonItem: function _renderButtonItem(item) {\n      var buttonItem = $(\"<span>\");\n\n      this._setText(buttonItem, item.label);\n\n      this._addClass(buttonItem, \"ui-selectmenu-text\");\n\n      return buttonItem;\n    },\n    _renderMenu: function _renderMenu(ul, items) {\n      var that = this,\n          currentOptgroup = \"\";\n      $.each(items, function (index, item) {\n        var li;\n\n        if (item.optgroup !== currentOptgroup) {\n          li = $(\"<li>\", {\n            text: item.optgroup\n          });\n\n          that._addClass(li, \"ui-selectmenu-optgroup\", \"ui-menu-divider\" + (item.element.parent(\"optgroup\").prop(\"disabled\") ? \" ui-state-disabled\" : \"\"));\n\n          li.appendTo(ul);\n          currentOptgroup = item.optgroup;\n        }\n\n        that._renderItemData(ul, item);\n      });\n    },\n    _renderItemData: function _renderItemData(ul, item) {\n      return this._renderItem(ul, item).data(\"ui-selectmenu-item\", item);\n    },\n    _renderItem: function _renderItem(ul, item) {\n      var li = $(\"<li>\"),\n          wrapper = $(\"<div>\", {\n        title: item.element.attr(\"title\")\n      });\n\n      if (item.disabled) {\n        this._addClass(li, null, \"ui-state-disabled\");\n      }\n\n      this._setText(wrapper, item.label);\n\n      return li.append(wrapper).appendTo(ul);\n    },\n    _setText: function _setText(element, value) {\n      if (value) {\n        element.text(value);\n      } else {\n        element.html(\"&#160;\");\n      }\n    },\n    _move: function _move(direction, event) {\n      var item,\n          next,\n          filter = \".ui-menu-item\";\n\n      if (this.isOpen) {\n        item = this.menuItems.eq(this.focusIndex).parent(\"li\");\n      } else {\n        item = this.menuItems.eq(this.element[0].selectedIndex).parent(\"li\");\n        filter += \":not(.ui-state-disabled)\";\n      }\n\n      if (direction === \"first\" || direction === \"last\") {\n        next = item[direction === \"first\" ? \"prevAll\" : \"nextAll\"](filter).eq(-1);\n      } else {\n        next = item[direction + \"All\"](filter).eq(0);\n      }\n\n      if (next.length) {\n        this.menuInstance.focus(event, next);\n      }\n    },\n    _getSelectedItem: function _getSelectedItem() {\n      return this.menuItems.eq(this.element[0].selectedIndex).parent(\"li\");\n    },\n    _toggle: function _toggle(event) {\n      this[this.isOpen ? \"close\" : \"open\"](event);\n    },\n    _setSelection: function _setSelection() {\n      var selection;\n\n      if (!this.range) {\n        return;\n      }\n\n      if (window.getSelection) {\n        selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(this.range); // Support: IE8\n      } else {\n        this.range.select();\n      } // Support: IE\n      // Setting the text selection kills the button focus in IE, but\n      // restoring the focus doesn't kill the selection.\n\n\n      this.button.focus();\n    },\n    _documentClick: {\n      mousedown: function mousedown(event) {\n        if (!this.isOpen) {\n          return;\n        }\n\n        if (!$(event.target).closest(\".ui-selectmenu-menu, #\" + $.ui.escapeSelector(this.ids.button)).length) {\n          this.close(event);\n        }\n      }\n    },\n    _buttonEvents: {\n      // Prevent text selection from being reset when interacting with the selectmenu (#10144)\n      mousedown: function mousedown() {\n        var selection;\n\n        if (window.getSelection) {\n          selection = window.getSelection();\n\n          if (selection.rangeCount) {\n            this.range = selection.getRangeAt(0);\n          } // Support: IE8\n\n        } else {\n          this.range = document.selection.createRange();\n        }\n      },\n      click: function click(event) {\n        this._setSelection();\n\n        this._toggle(event);\n      },\n      keydown: function keydown(event) {\n        var preventDefault = true;\n\n        switch (event.keyCode) {\n          case $.ui.keyCode.TAB:\n          case $.ui.keyCode.ESCAPE:\n            this.close(event);\n            preventDefault = false;\n            break;\n\n          case $.ui.keyCode.ENTER:\n            if (this.isOpen) {\n              this._selectFocusedItem(event);\n            }\n\n            break;\n\n          case $.ui.keyCode.UP:\n            if (event.altKey) {\n              this._toggle(event);\n            } else {\n              this._move(\"prev\", event);\n            }\n\n            break;\n\n          case $.ui.keyCode.DOWN:\n            if (event.altKey) {\n              this._toggle(event);\n            } else {\n              this._move(\"next\", event);\n            }\n\n            break;\n\n          case $.ui.keyCode.SPACE:\n            if (this.isOpen) {\n              this._selectFocusedItem(event);\n            } else {\n              this._toggle(event);\n            }\n\n            break;\n\n          case $.ui.keyCode.LEFT:\n            this._move(\"prev\", event);\n\n            break;\n\n          case $.ui.keyCode.RIGHT:\n            this._move(\"next\", event);\n\n            break;\n\n          case $.ui.keyCode.HOME:\n          case $.ui.keyCode.PAGE_UP:\n            this._move(\"first\", event);\n\n            break;\n\n          case $.ui.keyCode.END:\n          case $.ui.keyCode.PAGE_DOWN:\n            this._move(\"last\", event);\n\n            break;\n\n          default:\n            this.menu.trigger(event);\n            preventDefault = false;\n        }\n\n        if (preventDefault) {\n          event.preventDefault();\n        }\n      }\n    },\n    _selectFocusedItem: function _selectFocusedItem(event) {\n      var item = this.menuItems.eq(this.focusIndex).parent(\"li\");\n\n      if (!item.hasClass(\"ui-state-disabled\")) {\n        this._select(item.data(\"ui-selectmenu-item\"), event);\n      }\n    },\n    _select: function _select(item, event) {\n      var oldIndex = this.element[0].selectedIndex; // Change native select element\n\n      this.element[0].selectedIndex = item.index;\n      this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(item));\n\n      this._setAria(item);\n\n      this._trigger(\"select\", event, {\n        item: item\n      });\n\n      if (item.index !== oldIndex) {\n        this._trigger(\"change\", event, {\n          item: item\n        });\n      }\n\n      this.close(event);\n    },\n    _setAria: function _setAria(item) {\n      var id = this.menuItems.eq(item.index).attr(\"id\");\n      this.button.attr({\n        \"aria-labelledby\": id,\n        \"aria-activedescendant\": id\n      });\n      this.menu.attr(\"aria-activedescendant\", id);\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"icons\") {\n        var icon = this.button.find(\"span.ui-icon\");\n\n        this._removeClass(icon, null, this.options.icons.button)._addClass(icon, null, value.button);\n      }\n\n      this._super(key, value);\n\n      if (key === \"appendTo\") {\n        this.menuWrap.appendTo(this._appendTo());\n      }\n\n      if (key === \"width\") {\n        this._resizeButton();\n      }\n    },\n    _setOptionDisabled: function _setOptionDisabled(value) {\n      this._super(value);\n\n      this.menuInstance.option(\"disabled\", value);\n      this.button.attr(\"aria-disabled\", value);\n\n      this._toggleClass(this.button, null, \"ui-state-disabled\", value);\n\n      this.element.prop(\"disabled\", value);\n\n      if (value) {\n        this.button.attr(\"tabindex\", -1);\n        this.close();\n      } else {\n        this.button.attr(\"tabindex\", 0);\n      }\n    },\n    _appendTo: function _appendTo() {\n      var element = this.options.appendTo;\n\n      if (element) {\n        element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);\n      }\n\n      if (!element || !element[0]) {\n        element = this.element.closest(\".ui-front, dialog\");\n      }\n\n      if (!element.length) {\n        element = this.document[0].body;\n      }\n\n      return element;\n    },\n    _toggleAttr: function _toggleAttr() {\n      this.button.attr(\"aria-expanded\", this.isOpen); // We can't use two _toggleClass() calls here, because we need to make sure\n      // we always remove classes first and add them second, otherwise if both classes have the\n      // same theme class, it will be removed after we add it.\n\n      this._removeClass(this.button, \"ui-selectmenu-button-\" + (this.isOpen ? \"closed\" : \"open\"))._addClass(this.button, \"ui-selectmenu-button-\" + (this.isOpen ? \"open\" : \"closed\"))._toggleClass(this.menuWrap, \"ui-selectmenu-open\", null, this.isOpen);\n\n      this.menu.attr(\"aria-hidden\", !this.isOpen);\n    },\n    _resizeButton: function _resizeButton() {\n      var width = this.options.width; // For `width: false`, just remove inline style and stop\n\n      if (width === false) {\n        this.button.css(\"width\", \"\");\n        return;\n      } // For `width: null`, match the width of the original element\n\n\n      if (width === null) {\n        width = this.element.show().outerWidth();\n        this.element.hide();\n      }\n\n      this.button.outerWidth(width);\n    },\n    _resizeMenu: function _resizeMenu() {\n      this.menu.outerWidth(Math.max(this.button.outerWidth(), // Support: IE10\n      // IE10 wraps long text (possibly a rounding bug)\n      // so we add 1px to avoid the wrapping\n      this.menu.width(\"\").outerWidth() + 1));\n    },\n    _getCreateOptions: function _getCreateOptions() {\n      var options = this._super();\n\n      options.disabled = this.element.prop(\"disabled\");\n      return options;\n    },\n    _parseOptions: function _parseOptions(options) {\n      var that = this,\n          data = [];\n      options.each(function (index, item) {\n        data.push(that._parseOption($(item), index));\n      });\n      this.items = data;\n    },\n    _parseOption: function _parseOption(option, index) {\n      var optgroup = option.parent(\"optgroup\");\n      return {\n        element: option,\n        index: index,\n        value: option.val(),\n        label: option.text(),\n        optgroup: optgroup.attr(\"label\") || \"\",\n        disabled: optgroup.prop(\"disabled\") || option.prop(\"disabled\")\n      };\n    },\n    _destroy: function _destroy() {\n      this._unbindFormResetHandler();\n\n      this.menuWrap.remove();\n      this.button.remove();\n      this.element.show();\n      this.element.removeUniqueId();\n      this.labels.attr(\"for\", this.ids.element);\n    }\n  }]);\n});","map":null,"metadata":{},"sourceType":"module"}