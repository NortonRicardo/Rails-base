{"ast":null,"code":"/*!\n * jQuery UI Progressbar 1.12.1\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n//>>label: Progressbar\n//>>group: Widgets\n// jscs:disable maximumLineLength\n//>>description: Displays a status indicator for loading state, standard percentage, and other progress indicators.\n// jscs:enable maximumLineLength\n//>>docs: http://api.jqueryui.com/progressbar/\n//>>demos: http://jqueryui.com/progressbar/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/progressbar.css\n//>>css.theme: ../../themes/base/theme.css\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\", \"../version\", \"../widget\"], factory);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  return $.widget(\"ui.progressbar\", {\n    version: \"1.12.1\",\n    options: {\n      classes: {\n        \"ui-progressbar\": \"ui-corner-all\",\n        \"ui-progressbar-value\": \"ui-corner-left\",\n        \"ui-progressbar-complete\": \"ui-corner-right\"\n      },\n      max: 100,\n      value: 0,\n      change: null,\n      complete: null\n    },\n    min: 0,\n    _create: function _create() {\n      // Constrain initial value\n      this.oldValue = this.options.value = this._constrainedValue();\n      this.element.attr({\n        // Only set static values; aria-valuenow and aria-valuemax are\n        // set inside _refreshValue()\n        role: \"progressbar\",\n        \"aria-valuemin\": this.min\n      });\n\n      this._addClass(\"ui-progressbar\", \"ui-widget ui-widget-content\");\n\n      this.valueDiv = $(\"<div>\").appendTo(this.element);\n\n      this._addClass(this.valueDiv, \"ui-progressbar-value\", \"ui-widget-header\");\n\n      this._refreshValue();\n    },\n    _destroy: function _destroy() {\n      this.element.removeAttr(\"role aria-valuemin aria-valuemax aria-valuenow\");\n      this.valueDiv.remove();\n    },\n    value: function value(newValue) {\n      if (newValue === undefined) {\n        return this.options.value;\n      }\n\n      this.options.value = this._constrainedValue(newValue);\n\n      this._refreshValue();\n    },\n    _constrainedValue: function _constrainedValue(newValue) {\n      if (newValue === undefined) {\n        newValue = this.options.value;\n      }\n\n      this.indeterminate = newValue === false; // Sanitize value\n\n      if (typeof newValue !== \"number\") {\n        newValue = 0;\n      }\n\n      return this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue));\n    },\n    _setOptions: function _setOptions(options) {\n      // Ensure \"value\" option is set after other values (like max)\n      var value = options.value;\n      delete options.value;\n\n      this._super(options);\n\n      this.options.value = this._constrainedValue(value);\n\n      this._refreshValue();\n    },\n    _setOption: function _setOption(key, value) {\n      if (key === \"max\") {\n        // Don't allow a max less than min\n        value = Math.max(this.min, value);\n      }\n\n      this._super(key, value);\n    },\n    _setOptionDisabled: function _setOptionDisabled(value) {\n      this._super(value);\n\n      this.element.attr(\"aria-disabled\", value);\n\n      this._toggleClass(null, \"ui-state-disabled\", !!value);\n    },\n    _percentage: function _percentage() {\n      return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);\n    },\n    _refreshValue: function _refreshValue() {\n      var value = this.options.value,\n          percentage = this._percentage();\n\n      this.valueDiv.toggle(this.indeterminate || value > this.min).width(percentage.toFixed(0) + \"%\");\n\n      this._toggleClass(this.valueDiv, \"ui-progressbar-complete\", null, value === this.options.max)._toggleClass(\"ui-progressbar-indeterminate\", null, this.indeterminate);\n\n      if (this.indeterminate) {\n        this.element.removeAttr(\"aria-valuenow\");\n\n        if (!this.overlayDiv) {\n          this.overlayDiv = $(\"<div>\").appendTo(this.valueDiv);\n\n          this._addClass(this.overlayDiv, \"ui-progressbar-overlay\");\n        }\n      } else {\n        this.element.attr({\n          \"aria-valuemax\": this.options.max,\n          \"aria-valuenow\": value\n        });\n\n        if (this.overlayDiv) {\n          this.overlayDiv.remove();\n          this.overlayDiv = null;\n        }\n      }\n\n      if (this.oldValue !== value) {\n        this.oldValue = value;\n\n        this._trigger(\"change\");\n      }\n\n      if (value === this.options.max) {\n        this._trigger(\"complete\");\n      }\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}