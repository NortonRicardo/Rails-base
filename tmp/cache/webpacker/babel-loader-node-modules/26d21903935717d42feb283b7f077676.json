{"ast":null,"code":"/*!\n * jQuery UI Selectable 1.12.1\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n//>>label: Selectable\n//>>group: Interactions\n//>>description: Allows groups of elements to be selected with the mouse.\n//>>docs: http://api.jqueryui.com/selectable/\n//>>demos: http://jqueryui.com/selectable/\n//>>css.structure: ../../themes/base/selectable.css\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\", \"./mouse\", \"../version\", \"../widget\"], factory);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  return $.widget(\"ui.selectable\", $.ui.mouse, {\n    version: \"1.12.1\",\n    options: {\n      appendTo: \"body\",\n      autoRefresh: true,\n      distance: 0,\n      filter: \"*\",\n      tolerance: \"touch\",\n      // Callbacks\n      selected: null,\n      selecting: null,\n      start: null,\n      stop: null,\n      unselected: null,\n      unselecting: null\n    },\n    _create: function _create() {\n      var that = this;\n\n      this._addClass(\"ui-selectable\");\n\n      this.dragged = false; // Cache selectee children based on filter\n\n      this.refresh = function () {\n        that.elementPos = $(that.element[0]).offset();\n        that.selectees = $(that.options.filter, that.element[0]);\n\n        that._addClass(that.selectees, \"ui-selectee\");\n\n        that.selectees.each(function () {\n          var $this = $(this),\n              selecteeOffset = $this.offset(),\n              pos = {\n            left: selecteeOffset.left - that.elementPos.left,\n            top: selecteeOffset.top - that.elementPos.top\n          };\n          $.data(this, \"selectable-item\", {\n            element: this,\n            $element: $this,\n            left: pos.left,\n            top: pos.top,\n            right: pos.left + $this.outerWidth(),\n            bottom: pos.top + $this.outerHeight(),\n            startselected: false,\n            selected: $this.hasClass(\"ui-selected\"),\n            selecting: $this.hasClass(\"ui-selecting\"),\n            unselecting: $this.hasClass(\"ui-unselecting\")\n          });\n        });\n      };\n\n      this.refresh();\n\n      this._mouseInit();\n\n      this.helper = $(\"<div>\");\n\n      this._addClass(this.helper, \"ui-selectable-helper\");\n    },\n    _destroy: function _destroy() {\n      this.selectees.removeData(\"selectable-item\");\n\n      this._mouseDestroy();\n    },\n    _mouseStart: function _mouseStart(event) {\n      var that = this,\n          options = this.options;\n      this.opos = [event.pageX, event.pageY];\n      this.elementPos = $(this.element[0]).offset();\n\n      if (this.options.disabled) {\n        return;\n      }\n\n      this.selectees = $(options.filter, this.element[0]);\n\n      this._trigger(\"start\", event);\n\n      $(options.appendTo).append(this.helper); // position helper (lasso)\n\n      this.helper.css({\n        \"left\": event.pageX,\n        \"top\": event.pageY,\n        \"width\": 0,\n        \"height\": 0\n      });\n\n      if (options.autoRefresh) {\n        this.refresh();\n      }\n\n      this.selectees.filter(\".ui-selected\").each(function () {\n        var selectee = $.data(this, \"selectable-item\");\n        selectee.startselected = true;\n\n        if (!event.metaKey && !event.ctrlKey) {\n          that._removeClass(selectee.$element, \"ui-selected\");\n\n          selectee.selected = false;\n\n          that._addClass(selectee.$element, \"ui-unselecting\");\n\n          selectee.unselecting = true; // selectable UNSELECTING callback\n\n          that._trigger(\"unselecting\", event, {\n            unselecting: selectee.element\n          });\n        }\n      });\n      $(event.target).parents().addBack().each(function () {\n        var doSelect,\n            selectee = $.data(this, \"selectable-item\");\n\n        if (selectee) {\n          doSelect = !event.metaKey && !event.ctrlKey || !selectee.$element.hasClass(\"ui-selected\");\n\n          that._removeClass(selectee.$element, doSelect ? \"ui-unselecting\" : \"ui-selected\")._addClass(selectee.$element, doSelect ? \"ui-selecting\" : \"ui-unselecting\");\n\n          selectee.unselecting = !doSelect;\n          selectee.selecting = doSelect;\n          selectee.selected = doSelect; // selectable (UN)SELECTING callback\n\n          if (doSelect) {\n            that._trigger(\"selecting\", event, {\n              selecting: selectee.element\n            });\n          } else {\n            that._trigger(\"unselecting\", event, {\n              unselecting: selectee.element\n            });\n          }\n\n          return false;\n        }\n      });\n    },\n    _mouseDrag: function _mouseDrag(event) {\n      this.dragged = true;\n\n      if (this.options.disabled) {\n        return;\n      }\n\n      var tmp,\n          that = this,\n          options = this.options,\n          x1 = this.opos[0],\n          y1 = this.opos[1],\n          x2 = event.pageX,\n          y2 = event.pageY;\n\n      if (x1 > x2) {\n        tmp = x2;\n        x2 = x1;\n        x1 = tmp;\n      }\n\n      if (y1 > y2) {\n        tmp = y2;\n        y2 = y1;\n        y1 = tmp;\n      }\n\n      this.helper.css({\n        left: x1,\n        top: y1,\n        width: x2 - x1,\n        height: y2 - y1\n      });\n      this.selectees.each(function () {\n        var selectee = $.data(this, \"selectable-item\"),\n            hit = false,\n            offset = {}; //prevent helper from being selected if appendTo: selectable\n\n        if (!selectee || selectee.element === that.element[0]) {\n          return;\n        }\n\n        offset.left = selectee.left + that.elementPos.left;\n        offset.right = selectee.right + that.elementPos.left;\n        offset.top = selectee.top + that.elementPos.top;\n        offset.bottom = selectee.bottom + that.elementPos.top;\n\n        if (options.tolerance === \"touch\") {\n          hit = !(offset.left > x2 || offset.right < x1 || offset.top > y2 || offset.bottom < y1);\n        } else if (options.tolerance === \"fit\") {\n          hit = offset.left > x1 && offset.right < x2 && offset.top > y1 && offset.bottom < y2;\n        }\n\n        if (hit) {\n          // SELECT\n          if (selectee.selected) {\n            that._removeClass(selectee.$element, \"ui-selected\");\n\n            selectee.selected = false;\n          }\n\n          if (selectee.unselecting) {\n            that._removeClass(selectee.$element, \"ui-unselecting\");\n\n            selectee.unselecting = false;\n          }\n\n          if (!selectee.selecting) {\n            that._addClass(selectee.$element, \"ui-selecting\");\n\n            selectee.selecting = true; // selectable SELECTING callback\n\n            that._trigger(\"selecting\", event, {\n              selecting: selectee.element\n            });\n          }\n        } else {\n          // UNSELECT\n          if (selectee.selecting) {\n            if ((event.metaKey || event.ctrlKey) && selectee.startselected) {\n              that._removeClass(selectee.$element, \"ui-selecting\");\n\n              selectee.selecting = false;\n\n              that._addClass(selectee.$element, \"ui-selected\");\n\n              selectee.selected = true;\n            } else {\n              that._removeClass(selectee.$element, \"ui-selecting\");\n\n              selectee.selecting = false;\n\n              if (selectee.startselected) {\n                that._addClass(selectee.$element, \"ui-unselecting\");\n\n                selectee.unselecting = true;\n              } // selectable UNSELECTING callback\n\n\n              that._trigger(\"unselecting\", event, {\n                unselecting: selectee.element\n              });\n            }\n          }\n\n          if (selectee.selected) {\n            if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {\n              that._removeClass(selectee.$element, \"ui-selected\");\n\n              selectee.selected = false;\n\n              that._addClass(selectee.$element, \"ui-unselecting\");\n\n              selectee.unselecting = true; // selectable UNSELECTING callback\n\n              that._trigger(\"unselecting\", event, {\n                unselecting: selectee.element\n              });\n            }\n          }\n        }\n      });\n      return false;\n    },\n    _mouseStop: function _mouseStop(event) {\n      var that = this;\n      this.dragged = false;\n      $(\".ui-unselecting\", this.element[0]).each(function () {\n        var selectee = $.data(this, \"selectable-item\");\n\n        that._removeClass(selectee.$element, \"ui-unselecting\");\n\n        selectee.unselecting = false;\n        selectee.startselected = false;\n\n        that._trigger(\"unselected\", event, {\n          unselected: selectee.element\n        });\n      });\n      $(\".ui-selecting\", this.element[0]).each(function () {\n        var selectee = $.data(this, \"selectable-item\");\n\n        that._removeClass(selectee.$element, \"ui-selecting\")._addClass(selectee.$element, \"ui-selected\");\n\n        selectee.selecting = false;\n        selectee.selected = true;\n        selectee.startselected = true;\n\n        that._trigger(\"selected\", event, {\n          selected: selectee.element\n        });\n      });\n\n      this._trigger(\"stop\", event);\n\n      this.helper.remove();\n      return false;\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}