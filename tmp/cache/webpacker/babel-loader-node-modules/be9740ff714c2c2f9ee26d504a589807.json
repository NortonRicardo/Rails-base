{"ast":null,"code":"/*!\n * jQuery UI Spinner 1.12.1\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n//>>label: Spinner\n//>>group: Widgets\n//>>description: Displays buttons to easily input numbers via the keyboard or mouse.\n//>>docs: http://api.jqueryui.com/spinner/\n//>>demos: http://jqueryui.com/spinner/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/spinner.css\n//>>css.theme: ../../themes/base/theme.css\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\", \"./button\", \"../version\", \"../keycode\", \"../safe-active-element\", \"../widget\"], factory);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  function spinnerModifer(fn) {\n    return function () {\n      var previous = this.element.val();\n      fn.apply(this, arguments);\n\n      this._refresh();\n\n      if (previous !== this.element.val()) {\n        this._trigger(\"change\");\n      }\n    };\n  }\n\n  $.widget(\"ui.spinner\", {\n    version: \"1.12.1\",\n    defaultElement: \"<input>\",\n    widgetEventPrefix: \"spin\",\n    options: {\n      classes: {\n        \"ui-spinner\": \"ui-corner-all\",\n        \"ui-spinner-down\": \"ui-corner-br\",\n        \"ui-spinner-up\": \"ui-corner-tr\"\n      },\n      culture: null,\n      icons: {\n        down: \"ui-icon-triangle-1-s\",\n        up: \"ui-icon-triangle-1-n\"\n      },\n      incremental: true,\n      max: null,\n      min: null,\n      numberFormat: null,\n      page: 10,\n      step: 1,\n      change: null,\n      spin: null,\n      start: null,\n      stop: null\n    },\n    _create: function _create() {\n      // handle string values that need to be parsed\n      this._setOption(\"max\", this.options.max);\n\n      this._setOption(\"min\", this.options.min);\n\n      this._setOption(\"step\", this.options.step); // Only format if there is a value, prevents the field from being marked\n      // as invalid in Firefox, see #9573.\n\n\n      if (this.value() !== \"\") {\n        // Format the value, but don't constrain.\n        this._value(this.element.val(), true);\n      }\n\n      this._draw();\n\n      this._on(this._events);\n\n      this._refresh(); // Turning off autocomplete prevents the browser from remembering the\n      // value when navigating through history, so we re-enable autocomplete\n      // if the page is unloaded before the widget is destroyed. #7790\n\n\n      this._on(this.window, {\n        beforeunload: function beforeunload() {\n          this.element.removeAttr(\"autocomplete\");\n        }\n      });\n    },\n    _getCreateOptions: function _getCreateOptions() {\n      var options = this._super();\n\n      var element = this.element;\n      $.each([\"min\", \"max\", \"step\"], function (i, option) {\n        var value = element.attr(option);\n\n        if (value != null && value.length) {\n          options[option] = value;\n        }\n      });\n      return options;\n    },\n    _events: {\n      keydown: function keydown(event) {\n        if (this._start(event) && this._keydown(event)) {\n          event.preventDefault();\n        }\n      },\n      keyup: \"_stop\",\n      focus: function focus() {\n        this.previous = this.element.val();\n      },\n      blur: function blur(event) {\n        if (this.cancelBlur) {\n          delete this.cancelBlur;\n          return;\n        }\n\n        this._stop();\n\n        this._refresh();\n\n        if (this.previous !== this.element.val()) {\n          this._trigger(\"change\", event);\n        }\n      },\n      mousewheel: function mousewheel(event, delta) {\n        if (!delta) {\n          return;\n        }\n\n        if (!this.spinning && !this._start(event)) {\n          return false;\n        }\n\n        this._spin((delta > 0 ? 1 : -1) * this.options.step, event);\n\n        clearTimeout(this.mousewheelTimer);\n        this.mousewheelTimer = this._delay(function () {\n          if (this.spinning) {\n            this._stop(event);\n          }\n        }, 100);\n        event.preventDefault();\n      },\n      \"mousedown .ui-spinner-button\": function mousedownUiSpinnerButton(event) {\n        var previous; // We never want the buttons to have focus; whenever the user is\n        // interacting with the spinner, the focus should be on the input.\n        // If the input is focused then this.previous is properly set from\n        // when the input first received focus. If the input is not focused\n        // then we need to set this.previous based on the value before spinning.\n\n        previous = this.element[0] === $.ui.safeActiveElement(this.document[0]) ? this.previous : this.element.val();\n\n        function checkFocus() {\n          var isActive = this.element[0] === $.ui.safeActiveElement(this.document[0]);\n\n          if (!isActive) {\n            this.element.trigger(\"focus\");\n            this.previous = previous; // support: IE\n            // IE sets focus asynchronously, so we need to check if focus\n            // moved off of the input because the user clicked on the button.\n\n            this._delay(function () {\n              this.previous = previous;\n            });\n          }\n        } // Ensure focus is on (or stays on) the text field\n\n\n        event.preventDefault();\n        checkFocus.call(this); // Support: IE\n        // IE doesn't prevent moving focus even with event.preventDefault()\n        // so we set a flag to know when we should ignore the blur event\n        // and check (again) if focus moved off of the input.\n\n        this.cancelBlur = true;\n\n        this._delay(function () {\n          delete this.cancelBlur;\n          checkFocus.call(this);\n        });\n\n        if (this._start(event) === false) {\n          return;\n        }\n\n        this._repeat(null, $(event.currentTarget).hasClass(\"ui-spinner-up\") ? 1 : -1, event);\n      },\n      \"mouseup .ui-spinner-button\": \"_stop\",\n      \"mouseenter .ui-spinner-button\": function mouseenterUiSpinnerButton(event) {\n        // button will add ui-state-active if mouse was down while mouseleave and kept down\n        if (!$(event.currentTarget).hasClass(\"ui-state-active\")) {\n          return;\n        }\n\n        if (this._start(event) === false) {\n          return false;\n        }\n\n        this._repeat(null, $(event.currentTarget).hasClass(\"ui-spinner-up\") ? 1 : -1, event);\n      },\n      // TODO: do we really want to consider this a stop?\n      // shouldn't we just stop the repeater and wait until mouseup before\n      // we trigger the stop event?\n      \"mouseleave .ui-spinner-button\": \"_stop\"\n    },\n    // Support mobile enhanced option and make backcompat more sane\n    _enhance: function _enhance() {\n      this.uiSpinner = this.element.attr(\"autocomplete\", \"off\").wrap(\"<span>\").parent() // Add buttons\n      .append(\"<a></a><a></a>\");\n    },\n    _draw: function _draw() {\n      this._enhance();\n\n      this._addClass(this.uiSpinner, \"ui-spinner\", \"ui-widget ui-widget-content\");\n\n      this._addClass(\"ui-spinner-input\");\n\n      this.element.attr(\"role\", \"spinbutton\"); // Button bindings\n\n      this.buttons = this.uiSpinner.children(\"a\").attr(\"tabIndex\", -1).attr(\"aria-hidden\", true).button({\n        classes: {\n          \"ui-button\": \"\"\n        }\n      }); // TODO: Right now button does not support classes this is already updated in button PR\n\n      this._removeClass(this.buttons, \"ui-corner-all\");\n\n      this._addClass(this.buttons.first(), \"ui-spinner-button ui-spinner-up\");\n\n      this._addClass(this.buttons.last(), \"ui-spinner-button ui-spinner-down\");\n\n      this.buttons.first().button({\n        \"icon\": this.options.icons.up,\n        \"showLabel\": false\n      });\n      this.buttons.last().button({\n        \"icon\": this.options.icons.down,\n        \"showLabel\": false\n      }); // IE 6 doesn't understand height: 50% for the buttons\n      // unless the wrapper has an explicit height\n\n      if (this.buttons.height() > Math.ceil(this.uiSpinner.height() * 0.5) && this.uiSpinner.height() > 0) {\n        this.uiSpinner.height(this.uiSpinner.height());\n      }\n    },\n    _keydown: function _keydown(event) {\n      var options = this.options,\n          keyCode = $.ui.keyCode;\n\n      switch (event.keyCode) {\n        case keyCode.UP:\n          this._repeat(null, 1, event);\n\n          return true;\n\n        case keyCode.DOWN:\n          this._repeat(null, -1, event);\n\n          return true;\n\n        case keyCode.PAGE_UP:\n          this._repeat(null, options.page, event);\n\n          return true;\n\n        case keyCode.PAGE_DOWN:\n          this._repeat(null, -options.page, event);\n\n          return true;\n      }\n\n      return false;\n    },\n    _start: function _start(event) {\n      if (!this.spinning && this._trigger(\"start\", event) === false) {\n        return false;\n      }\n\n      if (!this.counter) {\n        this.counter = 1;\n      }\n\n      this.spinning = true;\n      return true;\n    },\n    _repeat: function _repeat(i, steps, event) {\n      i = i || 500;\n      clearTimeout(this.timer);\n      this.timer = this._delay(function () {\n        this._repeat(40, steps, event);\n      }, i);\n\n      this._spin(steps * this.options.step, event);\n    },\n    _spin: function _spin(step, event) {\n      var value = this.value() || 0;\n\n      if (!this.counter) {\n        this.counter = 1;\n      }\n\n      value = this._adjustValue(value + step * this._increment(this.counter));\n\n      if (!this.spinning || this._trigger(\"spin\", event, {\n        value: value\n      }) !== false) {\n        this._value(value);\n\n        this.counter++;\n      }\n    },\n    _increment: function _increment(i) {\n      var incremental = this.options.incremental;\n\n      if (incremental) {\n        return $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1);\n      }\n\n      return 1;\n    },\n    _precision: function _precision() {\n      var precision = this._precisionOf(this.options.step);\n\n      if (this.options.min !== null) {\n        precision = Math.max(precision, this._precisionOf(this.options.min));\n      }\n\n      return precision;\n    },\n    _precisionOf: function _precisionOf(num) {\n      var str = num.toString(),\n          decimal = str.indexOf(\".\");\n      return decimal === -1 ? 0 : str.length - decimal - 1;\n    },\n    _adjustValue: function _adjustValue(value) {\n      var base,\n          aboveMin,\n          options = this.options; // Make sure we're at a valid step\n      // - find out where we are relative to the base (min or 0)\n\n      base = options.min !== null ? options.min : 0;\n      aboveMin = value - base; // - round to the nearest step\n\n      aboveMin = Math.round(aboveMin / options.step) * options.step; // - rounding is based on 0, so adjust back to our base\n\n      value = base + aboveMin; // Fix precision from bad JS floating point math\n\n      value = parseFloat(value.toFixed(this._precision())); // Clamp the value\n\n      if (options.max !== null && value > options.max) {\n        return options.max;\n      }\n\n      if (options.min !== null && value < options.min) {\n        return options.min;\n      }\n\n      return value;\n    },\n    _stop: function _stop(event) {\n      if (!this.spinning) {\n        return;\n      }\n\n      clearTimeout(this.timer);\n      clearTimeout(this.mousewheelTimer);\n      this.counter = 0;\n      this.spinning = false;\n\n      this._trigger(\"stop\", event);\n    },\n    _setOption: function _setOption(key, value) {\n      var prevValue, first, last;\n\n      if (key === \"culture\" || key === \"numberFormat\") {\n        prevValue = this._parse(this.element.val());\n        this.options[key] = value;\n        this.element.val(this._format(prevValue));\n        return;\n      }\n\n      if (key === \"max\" || key === \"min\" || key === \"step\") {\n        if (typeof value === \"string\") {\n          value = this._parse(value);\n        }\n      }\n\n      if (key === \"icons\") {\n        first = this.buttons.first().find(\".ui-icon\");\n\n        this._removeClass(first, null, this.options.icons.up);\n\n        this._addClass(first, null, value.up);\n\n        last = this.buttons.last().find(\".ui-icon\");\n\n        this._removeClass(last, null, this.options.icons.down);\n\n        this._addClass(last, null, value.down);\n      }\n\n      this._super(key, value);\n    },\n    _setOptionDisabled: function _setOptionDisabled(value) {\n      this._super(value);\n\n      this._toggleClass(this.uiSpinner, null, \"ui-state-disabled\", !!value);\n\n      this.element.prop(\"disabled\", !!value);\n      this.buttons.button(value ? \"disable\" : \"enable\");\n    },\n    _setOptions: spinnerModifer(function (options) {\n      this._super(options);\n    }),\n    _parse: function _parse(val) {\n      if (typeof val === \"string\" && val !== \"\") {\n        val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val;\n      }\n\n      return val === \"\" || isNaN(val) ? null : val;\n    },\n    _format: function _format(value) {\n      if (value === \"\") {\n        return \"\";\n      }\n\n      return window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;\n    },\n    _refresh: function _refresh() {\n      this.element.attr({\n        \"aria-valuemin\": this.options.min,\n        \"aria-valuemax\": this.options.max,\n        // TODO: what should we do with values that can't be parsed?\n        \"aria-valuenow\": this._parse(this.element.val())\n      });\n    },\n    isValid: function isValid() {\n      var value = this.value(); // Null is invalid\n\n      if (value === null) {\n        return false;\n      } // If value gets adjusted, it's invalid\n\n\n      return value === this._adjustValue(value);\n    },\n    // Update the value without triggering change\n    _value: function _value(value, allowAny) {\n      var parsed;\n\n      if (value !== \"\") {\n        parsed = this._parse(value);\n\n        if (parsed !== null) {\n          if (!allowAny) {\n            parsed = this._adjustValue(parsed);\n          }\n\n          value = this._format(parsed);\n        }\n      }\n\n      this.element.val(value);\n\n      this._refresh();\n    },\n    _destroy: function _destroy() {\n      this.element.prop(\"disabled\", false).removeAttr(\"autocomplete role aria-valuemin aria-valuemax aria-valuenow\");\n      this.uiSpinner.replaceWith(this.element);\n    },\n    stepUp: spinnerModifer(function (steps) {\n      this._stepUp(steps);\n    }),\n    _stepUp: function _stepUp(steps) {\n      if (this._start()) {\n        this._spin((steps || 1) * this.options.step);\n\n        this._stop();\n      }\n    },\n    stepDown: spinnerModifer(function (steps) {\n      this._stepDown(steps);\n    }),\n    _stepDown: function _stepDown(steps) {\n      if (this._start()) {\n        this._spin((steps || 1) * -this.options.step);\n\n        this._stop();\n      }\n    },\n    pageUp: spinnerModifer(function (pages) {\n      this._stepUp((pages || 1) * this.options.page);\n    }),\n    pageDown: spinnerModifer(function (pages) {\n      this._stepDown((pages || 1) * this.options.page);\n    }),\n    value: function value(newVal) {\n      if (!arguments.length) {\n        return this._parse(this.element.val());\n      }\n\n      spinnerModifer(this._value).call(this, newVal);\n    },\n    widget: function widget() {\n      return this.uiSpinner;\n    }\n  }); // DEPRECATED\n  // TODO: switch return back to widget declaration at top of file when this is removed\n\n  if ($.uiBackCompat !== false) {\n    // Backcompat for spinner html extension points\n    $.widget(\"ui.spinner\", $.ui.spinner, {\n      _enhance: function _enhance() {\n        this.uiSpinner = this.element.attr(\"autocomplete\", \"off\").wrap(this._uiSpinnerHtml()).parent() // Add buttons\n        .append(this._buttonHtml());\n      },\n      _uiSpinnerHtml: function _uiSpinnerHtml() {\n        return \"<span>\";\n      },\n      _buttonHtml: function _buttonHtml() {\n        return \"<a></a><a></a>\";\n      }\n    });\n  }\n\n  return $.ui.spinner;\n});","map":null,"metadata":{},"sourceType":"module"}